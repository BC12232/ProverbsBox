{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","components/Article.tsx","components/Saying.tsx","components/Statement.tsx","components/StatementPopoverContent.tsx","components/AllPopoverContent.tsx","components/PopoverSelector.tsx","translation-plugins/TranslationConfig.ts","translation-plugins/KJV-Loader.ts","translation-plugins/Lexham-Loader.ts","components/TranslationToggle.tsx","pages/DefaultDisplayConfig.ts","api/Indexer.ts","pages/Library.tsx","api/NotificationsAssistant.ts","pages/Bookmarked.tsx","pages/Discover.tsx","pages/Details.tsx","api/TranslationMap.ts","api/StorageAssistant.ts","api/FilterCollection.ts","App.tsx","api/ContentManager.ts","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Article","section","ProverbsStructure","Sections","this","props","ctx","Section","Mode","SectionNumber","part","Part","className","BrowseMode","model","Verses","Chapter","Start","Ch","Name","verse","VerseNumber","Content","React","Component","Saying","class","Statement","tapDuration","longPressDuration","openModel","console","log","openVerseOptions","ID","gestureEnd","gestureStart","touchStart","state","touchState","clearTimeout","holdingTimer","setState","timeout","setTimeout","holdStart","saveTapped","undefined","nextProps","nextState","scrollStamp","prevProps","cardContent","cardText","Verse","firstHighlight","searchHighlights","length","iStart","lastIEnd","iEnd","reduce","encode","range","nonhighlight","substring","head","highlight","payloadAdds","push","key","payload","onClick","onDrag","onScroll","onTouchStart","stopPropagation","onMouseDown","preventDefault","heartCallback","icon","Saved","heartCircle","heartCircleOutline","StatementPopoverContent","currentChapter","context","value","toString","onIonChange","chapter","detail","setContext","update","$set","Statements","Range","r","Title","Array","from","End","x","i","slot","AllPopoverContent","ChangeBrowseMode","bm","size","color","all","JSON","stringify","parse","partCount","Vs","PopoverSelector","popoverContent","event","isOpen","onDidDismiss","onDismiss","scrollY","TranslationDataPath","reject","fetch","res","json","data","book","verses","text","catch","error","entries","passages","lexham","parseInt","split","TranslationToggle","useState","contentManager","GetTranslationName","version","setVersion","loading","setLoading","OnLoadTranslation","selectOpen","setSelectOpen","name","substr","toUpperCase","inputs","TranslationConfig","type","label","Label","checked","buttons","handler","LoadTranslation","setModel","GetModel","typeDisplay","filterFormat","statement","saying","translation","browseMode","Indexer","VerseID","Math","floor","structure","v","args","verseNumber","start","end","sayingsStructure","sayingsStructure_Any","statementStructure","statementStructure_Any","GetVerseSignature","sayingRes","secID","Sayings","sayID","sayingRange","IsVerseBetween","found","types","group","isSaying","statementRes","Intro","isStatement","meta","GetVerseType","GetVerseID","Type","TitlePrefix","GroupID","pattern","result","regex","RegExp","test","exec","SearchHighlights","index","Library","cm","ref","ClearFiltersNoRefresh","ApplyFilter","Number","span","spanStart","spanEnd","mdl","verseID","showVerseOptions","scrollHandler","timeStamp","heartHandler","statementModel","RemoveBookmark","Bookmark","createRef","searchContent","popClickEvent","popOpen","DefaultConfig","RestoreFilters","CacheFilters","UpdateSearch","elements","ComponentModels","forEach","c","keyVerse","Model","element","style","width","pageRef","persist","onSearch","onIonClear","onSearchClear","scrollEvents","onIonScrollStart","swipeToClose","presentingElement","current","component","fill","ellipsisVerticalOutline","withIonLifeCycle","LocalNotifications","Plugins","Storage","NotificationsAssistant","MAX_NOTIFICATIONS","frequency","listOfVerses","SetFrequency","SetNotificationHourRange","SetNotificationContent","NotificationSetter","set","get","frequencyStore","startStore","endStore","content","GetFrequency","GetStart","GetEnd","GetContent","getPending","pending","notifications","cancel","ClearNotifications","LoadParams","dateToday","Date","getFullYear","getMonth","getDate","endHour","endMinute","startHour","startMinute","interval","startMillisecond","scheduledCount","day","time","f","randomVerse","getRandomIndex","verseTitle","verseContent","schedule","title","body","at","getTime","random","Bookmarked","showPopover","setShowPopover","notificationToggle","setNotificationToggle","newFolderMode","setNewFolderMode","side","contentId","mode","folder","notificationsOutline","expand","pointerEvents","button","notificationsCircleOutline","shape","notificationAssistant","d","getHours","getMinutes","BakeNotification","routerLink","Discover","proverbCenterRef","foward","cur","selectedStatements","$push","pool","allStatements","back","IsTranslatationReady","comp","justify-content-center","align-items-center","disabled","chevronBackOutline","align-self-center","chevronForwardOutline","Details","defaultHref","TranslationMap","translationName","onLoadedCallbacks","callback","IsReady","TranslationName","loaderData","filter","trans","Loader","Load","Data","TriggerCallbacks","primary","StorageAssistant","storedIDs","isBookmarked","indexOf","splice","folderName","existingFolders","getFolders","some","order","max","memoryLocation","getFolderKey","notificationsOn","setFolders","folders","toRemove","find","removeId","removeOrder","editedFolders","currentFolder","toRename","newOrder","toReorder","oldOrder","reorderedFolders","verseSignature","getFolderVerseIds","verseArray","FilterGenerators","BySpan","ByType","verseTypes","t","toLowerCase","ByChapter","BySaved","sa","storageAssistant","filters","filterCache","searchPattern","translator","translatorLoading","componentModels","refinedModels","loadFile","translationPromise","AddOnLoadedCallback","RefreshModels","RefineSearch","func","FilterNames","Translation","BookmarkVerse","ToggleSaved","toggleSaved","models","m","removeBookmark","cacheName","filterName","filterGenerator","filterParams","RemoveFilter","signatures","PermuteVerses","s","LoadVerseMetadata","bundles","acc","groupName","values","bundle","prefix","foundPrefix","divider","verseParts","n_prefix","trimLeft","Text","Ref","sanitizedSearch","replace","ClearHighlights","refinedModel","SearchVerseClear","SearchVerseHighlight","isHighlighted","refinedVerses","App","useIonViewDidEnter","addListener","isActive","path","exact","render","to","tab","href","libraryOutline","bookmarkOutline","shuffleOutline","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wpFAAA,IAAIA,EAAM,CACT,kCAAmC,CAClC,GACA,IAED,iCAAkC,CACjC,GACA,IAED,2BAA4B,CAC3B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,2BAA4B,CAC3B,GACA,GAED,0BAA2B,CAC1B,GACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAiC,CAChC,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,gCAAiC,CAChC,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,uCAAwC,CACvC,IACA,IAED,sCAAuC,CACtC,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,mCAAoC,CACnC,IACA,IAED,kCAAmC,CAClC,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,kCAAmC,CAClC,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAiC,CAChC,IACA,IAED,+BAA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","file":"static/js/main.7eab0511.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t94,\n\t\t36\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t95,\n\t\t37\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t96,\n\t\t20\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t97,\n\t\t21\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t98,\n\t\t9\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t99,\n\t\t10\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t100,\n\t\t38\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t101,\n\t\t39\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t102,\n\t\t40\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t103,\n\t\t41\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t104,\n\t\t78\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t105,\n\t\t79\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t106,\n\t\t42\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t107,\n\t\t43\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t108,\n\t\t44\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t109,\n\t\t45\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t110,\n\t\t46\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t111,\n\t\t47\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t112,\n\t\t48\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t113,\n\t\t49\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t114,\n\t\t80\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t115,\n\t\t16\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t116,\n\t\t17\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t117,\n\t\t50\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t118,\n\t\t51\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t119,\n\t\t81\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t120,\n\t\t34\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t121,\n\t\t35\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t122,\n\t\t52\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t123,\n\t\t53\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t124,\n\t\t54\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t125,\n\t\t55\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t126,\n\t\t56\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t127,\n\t\t57\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t128,\n\t\t22\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t129,\n\t\t23\n\t],\n\t\"./ion-menu_3-ios.entry.js\": [\n\t\t130,\n\t\t58\n\t],\n\t\"./ion-menu_3-md.entry.js\": [\n\t\t131,\n\t\t59\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t132,\n\t\t11\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t133,\n\t\t12\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t134,\n\t\t15\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t135,\n\t\t13\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t136,\n\t\t14\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t137,\n\t\t60\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t138,\n\t\t61\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t139,\n\t\t62\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t140,\n\t\t63\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t141,\n\t\t64\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t142,\n\t\t65\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t143,\n\t\t24\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t144,\n\t\t25\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t145,\n\t\t32\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t146,\n\t\t33\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t147,\n\t\t82\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t148,\n\t\t66\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t149,\n\t\t67\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t150,\n\t\t68\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t151,\n\t\t69\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t152,\n\t\t70\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t153,\n\t\t71\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t154,\n\t\t72\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t155,\n\t\t83\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t156,\n\t\t84\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t157,\n\t\t28\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t158,\n\t\t85\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t159,\n\t\t86\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t160,\n\t\t73\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t161,\n\t\t74\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t162,\n\t\t31\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t163,\n\t\t75\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t164,\n\t\t76\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t165,\n\t\t77\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t166,\n\t\t26\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t167,\n\t\t27\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t168,\n\t\t18\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t169,\n\t\t19\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t170,\n\t\t87\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 64;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t174,\n\t\t93\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 66;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport {IArticle, ILibraryContext, IVerse} from \"../api/Interfaces\";\nimport ProverbsStructure from \"../indexing/ProverbsStructure.json\";\n\n// Styles\nimport \"./Proverb.scss\"\nimport \"./Article.css\";\n\ntype ArticleProp ={\n    model: IArticle\n    ctx: ILibraryContext\n}\n\ntype ArticleState = {\n\n}\n\nclass Article extends React.Component<ArticleProp, ArticleState> {\n    render() {\n        const section = ProverbsStructure.Sections[this.props.ctx.Section[this.props.ctx.Mode].SectionNumber];\n        const part = this.props.ctx.Section[this.props.ctx.Mode].Part;\n        return (\n            <>\n            <div className={\"article-container\"}>\n                <div className={\"scripture-styles\"}>\n                    <p></p>\n                    <div className={\"title\"}></div>\n\n                    <>\n                        {(this.props.ctx.BrowseMode === \"chapter\") ?\n                            <p><b>Chapter {this.props.model.Verses[0].Chapter}</b></p>\n                            :\n                            <>\n                                <p className={\"sub-title\"}>Chapter {(section.Start.Ch + part)}</p>\n                                <p className={\"lead-title\"}><b>{ section.Name } </b></p>\n                            </>\n                        }\n                    </>\n                        {\n                            this.props.model.Verses.map((verse: IVerse) =>\n                            (<div className={\"verse\"}>\n\n                                <p className={\"number\"}>\n                                {verse.VerseNumber}\n                                </p>\n                                <p className={\"ending-verse\"}>{verse.Content}</p>\n                            </div>)\n                            )\n                        }\n                    }\n\n                </div>\n            </div>\n\n        {/*\n                <div>\n\n                    <div class=\"verse\"></div>\n                    <p className ={\"subtitles\"}\n                        <p>\"{\"verses\": [{\"chapter\": 1, \"text\": \"The proverbs of Solomon the son of David, king of Israel;\", \"verse\": 1},\n                    {\"chapter\": 1, \"text\": \"To know wisdom and instruction; to perceive the words of understanding;\", \"verse\": 2},\n                    {\"chapter\": 1, \"text\": \"To receive the instruction of wisdom, justice, and judgment, and equity;\", \"verse\": 3},\n                    {\"chapter\": 1, \"text\": \"To give subtilty to the simple, to the young man knowledge and discretion.\", \"verse\": 4},\n                    {\"chapter\": 1, \"text\": \"A wise [man] will hear, and will increase learning; and a man of understanding shall attain unto wise counsels:\", \"verse\": 5},\n                    {\"chapter\": 1, \"text\": \"To understand a proverb, and the interpretation; the words of the wise, and their dark sayings.\", \"verse\": 6},\n                    {\"chapter\": 1, \"text\": \"The fear of the LORD [is] the beginning of knowledge: [but] fools despise wisdom and instruction.\", \"verse\": 7},\n                    {\"chapter\": 1, \"text\": \"My son, hear the instruction of thy father, and forsake not the law of thy mother:\", \"verse\": 8},\n                    {\"chapter\": 1, \"text\": \"For they [shall be] an ornament of grace unto thy head, and chains about thy neck.\", \"verse\": 9},\n                    {\"chapter\": 1, \"text\": \"My son, if sinners entice thee, consent thou not.\", \"verse\": 10},\n                    {\"chapter\": 1, \"text\": \"If they say, Come with us, let us lay wait for blood, let us lurk privily for the innocent without cause:\", \"verse\": 11},\n                    {\"chapter\": 1, \"text\": \"Let us swallow them up alive as the grave; and whole, as those that go down into the pit:\", \"verse\": 12},\n                    {\"chapter\": 1, \"text\": \"We shall find all precious substance, we shall fill our houses with spoil:\", \"verse\": 13},\n                    {\"chapter\": 1, \"text\": \"Cast in thy lot among us; let us all have one purse:\", \"verse\": 14},\n                    {\"chapter\": 1, \"text\": \"My son, walk not thou in the way with them; refrain thy foot from their path:\", \"verse\": 15},\n                    {\"chapter\": 1, \"text\": \"For their feet run to evil, and make haste to shed blood.\", \"verse\": 16},\n                    {\"chapter\": 1, \"text\": \"Surely in vain the net is spread in the sight of any bird.\", \"verse\": 17},\n                    {\"chapter\": 1, \"text\": \"And they lay wait for their [own] blood; they lurk privily for their [own] lives.\", \"verse\": 18},\n                    {\"chapter\": 1, \"text\": \"So [are] the ways of every one that is greedy of gain; [which] taketh away the life of the owners thereof.\", \"verse\": 19},\n                    {\"chapter\": 1, \"text\": \"Wisdom crieth without; she uttereth her voice in the streets:\", \"verse\": 20},\n                    {\"chapter\": 1, \"text\": \"She crieth in the chief place of concourse, in the openings of the gates: in the city she uttereth her words, [saying, ]\", \"verse\": 21},\n                    {\"chapter\": 1, \"text\": \"How long, ye simple ones, will ye love simplicity? and the scorners delight in their scorning, and fools hate knowledge?\", \"verse\": 22},\n                    {\"chapter\": 1, \"text\": \"Turn you at my reproof: behold, I will pour out my spirit unto you, I will make known my words unto you.\", \"verse\": 23},\n                    {\"chapter\": 1, \"text\": \"Because I have called, and ye refused; I have stretched out my hand, and no man regarded;\", \"verse\": 24},\n                    {\"chapter\": 1, \"text\": \"But ye have set at nought all my counsel, and would none of my reproof:\", \"verse\": 25},\n                    {\"chapter\": 1, \"text\": \"I also will laugh at your calamity; I will mock when your fear cometh;\", \"verse\": 26},\n                    {\"chapter\": 1, \"text\": \"When your fear cometh as desolation, and your destruction cometh as a whirlwind; when distress and anguish cometh upon you.\", \"verse\": 27},\n                    {\"chapter\": 1, \"text\": \"Then shall they call upon me, but I will not answer; they shall seek me early, but they shall not find me:\", \"verse\": 28},\n                    {\"chapter\": 1, \"text\": \"For that they hated knowledge, and did not choose the fear of the LORD:\", \"verse\": 29},\n                    {\"chapter\": 1, \"text\": \"They would none of my counsel: they despised all my reproof.\", \"verse\": 30},\n                    {\"chapter\": 1, \"text\": \"Therefore shall they eat of the fruit of their own way, and be filled with their own devices.\", \"verse\": 31},\n                    {\"chapter\": 1, \"text\": \"For the turning away of the simple shall slay them, and the prosperity of fools shall destroy them.\", \"verse\": 32},\n                    {\"chapter\": 1, \"text\": \"But whoso hearkeneth unto me shall dwell safely, and shall be quiet from fear of evil.\", \"verse\": 33},\n                    {\"chapter\": 2, \"text\": \"My son, if thou wilt receive my words, and hide my commandments with thee;\", \"verse\": 1},\n                */}\n            </>\n                );\n    }\n}\n\nexport {Article};","import {\n    IonCard\n} from '@ionic/react';\nimport React from 'react';\nimport {ISaying} from \"../api/Interfaces\";\n\n// Styles\nimport \"./Proverb.scss\"\n\ntype SayingProp ={\n    model: ISaying\n}\n\ntype SayingState = {\n\n}\n\nclass Saying extends React.Component<SayingProp, SayingState> {\n    render() {\n        return (\n            <IonCard class={\"saying\"}>\n                <h1>Saying</h1>\n            </IonCard>\n        );\n    }\n}\n\nexport {Saying};","import {\n    IonIcon\n} from '@ionic/react';\nimport React from 'react';\nimport {\n    IStatement,\n    ITextRange\n} from \"../api/Interfaces\";\n\n// Styles\nimport \"./Proverb.scss\"\nimport \"./Views.css\"\n\n// Icons\nimport {\n    heartCircle,\n    heartCircleOutline\n} from 'ionicons/icons';\n\ntype StatementProps = {\n    model: IStatement,\n    heartCallback: () => void,\n    scrollStamp: number,\n    openVerseOptions: (id: number) => void,\n    searchHighlights ?: Array<ITextRange>\n};\n\ntype StatementState = {\n    holdingTimer: any, // A delay event\n    touchState: string, // 'n' - none, 't' - tap, 'h' - hold\n}\n\nclass Statement extends React.Component<StatementProps, StatementState> {\n\n    constructor(props: StatementProps) {\n        super(props);\n\n        // init state\n        this.state = {\n            holdingTimer: undefined,\n            touchState: 'n'\n        };\n    }\n\n    // Render optimization\n    shouldComponentUpdate(nextProps: StatementProps, nextState: StatementState) {\n\n        // Don't rerender on scroll\n        if (this.state.touchState === 'n') {\n            if (this.props.scrollStamp !== nextProps.scrollStamp) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    componentDidUpdate(prevProps: StatementProps) {\n        \n        // if touching\n        if (this.state.touchState !== 'n') {\n\n            // detect scroll\n            if (this.props.scrollStamp !== prevProps.scrollStamp) {\n                console.log(\"Scroll Detected: \", this.props.scrollStamp);\n                \n                // clear timed model open\n                clearTimeout(this.state.holdingTimer);\n                this.setState({\n                    holdingTimer: null,\n                    touchState: 'n'\n                });\n            }\n        }\n    }\n\n    /* config */\n    tapDuration = 250;\n    longPressDuration = 200; /* Transitioned to click inlet durration */\n\n    /* folder model open */\n    openModel = () => {\n        console.log(\"Opening model\");\n        this.props.openVerseOptions(this.props.model.ID);\n        this.gestureEnd();\n    }\n\n    gestureStart = () => {\n        this.touchStart();\n    }\n\n    gestureEnd = () => {\n        if (this.state.touchState !== 'n') { // Copy paste code from scroll\n            // clear timed model open\n            clearTimeout(this.state.holdingTimer);\n            this.setState({\n                holdingTimer: null,\n                touchState: 'n'\n            });\n        }\n    }\n\n    /* To be called by gestureStart */\n    touchStart = () => {\n        let timeout = setTimeout( this.holdStart,  this.tapDuration);\n        this.setState({\n            holdingTimer: timeout,\n            touchState: 't'\n        });\n    }\n\n    holdStart = () => {\n        let timeout = setTimeout( this.openModel,  this.longPressDuration);\n        this.setState({\n            holdingTimer: timeout,\n            touchState: 'h'\n        });\n    }\n\n    saveTapped = () => {\n\n    }      \n\n    render() {\n\n        console.log(\"rendering card\");\n\n        type ICardEncoding = {\n            payload: any[],\n            head: number\n        };\n\n        let cardContent: any;\n        const cardText = this.props.model.Verse.Content;\n        const firstHighlight = (this.props.searchHighlights && this.props.searchHighlights.length)\n            ? this.props.searchHighlights[0].iStart\n            : cardText.length\n\n        // build a textual encoding of the highlights\n        if (this.props.searchHighlights) {\n            //const highlightMapper = [...this.props.searchHighlights, {iStart: -1, iEnd: -1}];\n            const lastIEnd = (this.props.searchHighlights.length > 0) ?\n                this.props.searchHighlights[this.props.searchHighlights.length-1].iEnd\n                : 0;\n            cardContent = this.props.searchHighlights.reduce((encode: ICardEncoding, range: ITextRange) => {\n                \n                const nonhighlight = cardText.substring(encode.head, range.iStart);\n                const highlight = cardText.substring(range.iStart, range.iEnd);\n\n                // init\n                let payloadAdds : any[] = [];\n                let head = encode.head;\n\n                // add nonhighlight (except if first)\n                if (range.iStart !== firstHighlight) {\n                    head += nonhighlight.length;\n                    payloadAdds.push(\n                        <span className=\"nonhighlight\" key={head}>\n                            { nonhighlight }\n                        </span>\n                    );\n                }\n\n                // add highlight\n                head += highlight.length;\n                payloadAdds.push((\n                    <span className=\"highlight\" key={head}>\n                        { highlight }\n                    </span>\n                    ));\n\n                // add tail (if last)\n                if (lastIEnd === range.iEnd) {\n                    payloadAdds.push(\n                    <span className=\"nonhighlight\" key={-1}>\n                        { cardText.substring(range.iEnd, cardText.length - 1) }\n                    </span>);\n                }\n\n                return {\n                    // combine\n                    payload: [\n                        ...(encode.payload),\n                        ...(payloadAdds)\n                    ],\n\n                    // increment head\n                    head: head\n                };\n            },\n            // start value\n            {\n                payload: [\n                    (\n                    <span className=\"nonhighlight\" key={0}>\n                        { cardText.substring(0, firstHighlight) }\n                    </span>\n                    )\n                ],\n                head: firstHighlight\n            })\n            // retrieve payload\n            .payload;            \n        }\n\n        // no highlights\n        else {\n            cardContent = cardText;\n        }\n\n        return (\n            <span\n                className={\"statement\"}\n                /*onTouchStart={this.gestureStart}\n                onTouchEnd={this.gestureEnd}\n                onMouseDown={this.gestureStart}\n                onMouseUp={this.gestureEnd}    */  \n                onClick={this.holdStart}          \n            >\n                <div className={\"statement-view\" + ((this.state.touchState === 'h') ? \" shrinking\" : \"\")}\n                    onDrag={()=>{console.log(\"Dragging\");}}\n                    onScroll={()=>{console.log(\"scrolling\");}}\n                >\n                    <h3 className={\"verse-content\"}>\n                    {\n                        cardContent\n                    }\n                    </h3>\n                    <div className={\"bar\"}/>\n                    <div className={\"info-bar\"}>\n                        <p className={\"verse-name\"}>Proverbs {this.props.model.Verse.Chapter}:{this.props.model.Verse.VerseNumber}</p>\n                            <IonIcon\n                                onTouchStart={(e)=>{e.stopPropagation()}}\n                                onMouseDown={(e)=>{e.stopPropagation()}}\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    this.props.heartCallback();\n                                }} className={\"save-icon\"} icon={this.props.model.Saved ? heartCircle : heartCircleOutline}></IonIcon>\n                    </div>\n                </div>\n            </span>\n        );\n    }\n}\n\nexport {Statement};","import {\n    IonItem,\n    IonLabel,\n    IonList,\n    IonRadio,\n    IonRadioGroup,\n} from \"@ionic/react\";\nimport React from \"react\";\nimport Statements from \"../indexing/Statements.json\"\nimport {ILibraryContext} from \"../api/Interfaces\";\nimport update from 'immutability-helper';\n\ntype IPopProps = {\n    context: ILibraryContext,\n    setContext: (ctx: ILibraryContext) => void\n};\n\nconst StatementPopoverContent = (props : IPopProps) => {\n\n    // retrieve important context info\n    const currentChapter = props.context.Chapter[props.context.Mode];\n\n    /*\n    Potentially important in the future\n\n    const ChangeSection = (section: number, part: number) => {\n        props.setContext(update(props.context, {\n            Section: { [props.context.Mode]: { $set: { SectionNumber: section, Part: part} }}\n        }));\n    };\n    */\n\n    const ChangeChapter = (chapter: number) => {\n        props.setContext(update(props.context, {\n            Chapter: { [props.context.Mode]: { $set: chapter }}\n        }));\n    };\n\n    /*\n    Potentially important in the future\n    const ChangeBrowseMode = (bm : string) => {\n        props.setContext(update(props.context, {\n            BrowseMode: { $set: bm }\n        }));\n    };\n    */\n\n    return (\n        <>\n            <div id={\"select-mode-container\"}>\n                <h3 id={\"mode-text\"}>Proverbs</h3>\n            </div>\n            <div id={\"top-shadow\"}/>\n            <div className={\"selection-box\"} onTouchStart={(e) => e.preventDefault()}>\n                <IonRadioGroup value={currentChapter.toString()} onIonChange={e => {\n                    // tells library to do a chapter context update\n                    ChangeChapter(e.detail.value);\n                }}>\n                    {\n                        Statements.Range.map(r => (\n                            <div key={r.Start.Ch}>\n                                <p className={\"title\"}>{r.Title}</p>\n                                <IonList>\n                                    {\n                                        // get chapter numbers\n                                        Array.from({length: r.End.Ch - r.Start.Ch + 1}, (x,i) => {\n                                            return i + r.Start.Ch;\n                                        }).map(chapter => (   // map to components\n                                            <IonItem key={chapter}>\n                                                <IonLabel className={\"chapter-select\"}><span\n                                                    className={\"text\"}>Chapter {chapter}</span>\n                                                </IonLabel>\n                                                <IonRadio\n                                                    slot=\"start\"\n                                                    value={chapter.toString()}\n                                                />\n                                            </IonItem>\n                                        ))\n                                    }\n                                </IonList>\n                            </div>\n                        ))\n                    }\n                </IonRadioGroup>\n            </div> {/*End .selection-box*/}\n        </>\n    );\n};\n\nexport {StatementPopoverContent};","\nimport {\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonRadio,\n    IonRadioGroup\n} from \"@ionic/react\";\nimport React from \"react\";\nimport {ILibraryContext} from \"../api/Interfaces\";\nimport ProverbsStructure from \"../indexing/ProverbsStructure.json\"\nimport update from 'immutability-helper'\n\ntype IPopProps = {\n    context: ILibraryContext,\n    setContext: (ctx: ILibraryContext) => void,\n};\n\nconst AllPopoverContent = (props : IPopProps) => {\n\n    const ChangeBrowseMode = (bm : string) => {\n        props.setContext(update(props.context, {\n            BrowseMode: { $set: bm }\n        }));\n    };\n\n    return (\n        <>\n            {/* content title */}\n            <div id={\"select-mode-container\"}>\n                <h3 id={\"mode-text\"}>Proverbs</h3>\n                {\n                    (props.context.BrowseMode === \"chapter\") ? (\n                        <IonButton id={\"mode-button\"} size=\"small\" color=\"dark\" onClick={()=>{ChangeBrowseMode(\"descriptor\");}}>Select by Descriptor</IonButton>\n                    )\n                    : <IonButton id={\"mode-button\"} size=\"small\" color=\"dark\" onClick={()=>{ChangeBrowseMode(\"chapter\");}}>Select by Chapter</IonButton>\n                }\n            </div>\n            <div id={\"top-shadow\"}/>\n\n            {/* content select (Select by Chapter)*/}\n            {(props.context.BrowseMode === \"chapter\") ?\n                (<div className={\"selection-box\"} onTouchStart={(e)=> e.preventDefault()}>\n                    { console.log(\"all chapters\", props.context.Chapter[\"all\"]) }\n                    <IonRadioGroup value={props.context.Chapter[\"all\"].toString()} onIonChange={e => {\n                        // update context chapter\n                        props.setContext(update(props.context, {\n                            Chapter: {all: {$set: e.detail.value}}\n                        }));\n                    }}>\n\n                        {/* render chapter select labels */}\n                        {\n                            // conditional render by chapter:descriptor\n                            Object.keys(ProverbsStructure.Verses).map(chapter => {\n                                return (\n                                    <IonItem key={chapter}>\n                                        <IonLabel className={\"chapter-select\"}><span\n                                            className={\"text\"}>Chapter {chapter}</span>\n                                        </IonLabel>\n                                        <IonRadio\n                                            slot=\"start\"\n                                            value={chapter.toString()}\n                                        />\n                                    </IonItem>\n                                );\n                            })\n                        }\n                    </IonRadioGroup>\n                </div>\n            )\n            :\n            (\n                <>\n                {/* content select (Select by Chapter)*/}\n                <div className={\"selection-box\"} onTouchStart={(e)=> e.preventDefault()}>\n                    { console.log(\"all chapters\", props.context.Chapter[\"all\"]) }\n                    <IonRadioGroup value={JSON.stringify(props.context.Section[\"all\"])} onIonChange={e => {\n\n                        // update context section\n                        console.log(e.detail.value);\n\n                        props.setContext(update(props.context, {\n                            Section: {all: {$set: JSON.parse(e.detail.value)}}\n                        }));\n                    }}>\n\n                        {/* render chapter select labels */}\n                        {\n                            ProverbsStructure.Sections.map((section, key) => {\n                                let usingPart : Boolean = section.Start.Ch !== section.End.Ch;\n                                if (usingPart) {\n                                    let partCount = section.End.Ch - section.Start.Ch + 1;\n                                    // @ts-ignore\n                                    return ([...Array(partCount).keys()].map(part => {\n                                            return (\n                                                <IonItem key={section.Start.Vs + \"000\" + section.Start.Ch + part}>\n                                                    <IonLabel className={\"chapter-select\"}><span\n                                                        className={\"text\"}>{section.Name + \", pt. \" + (part + 1)}</span>\n                                                    </IonLabel>\n                                                    <IonRadio\n                                                        slot=\"start\"\n                                                        value={JSON.stringify({\n                                                            SectionNumber: key,\n                                                            Part: part\n                                                        })}\n                                                    />\n                                                </IonItem>\n                                            )\n                                        })\n                                    )\n                                } else {\n                                    return (\n                                        <IonItem key={section.Start.Vs + \"000\" + section.Start.Ch}>\n                                            <IonLabel className={\"chapter-select\"}><span\n                                                className={\"text\"}>{section.Name}</span>\n                                            </IonLabel>\n                                            <IonRadio\n                                                slot=\"start\"\n                                                value={JSON.stringify({\n                                                    SectionNumber: key,\n                                                    Part: 0\n                                                })}\n                                            />\n                                        </IonItem>\n                                    );\n                                }\n                            }) // end of sections map\n                        }\n                    </IonRadioGroup>\n                </div> {/*End .selection-box*/}\n            </>\n        ) /* End of conditional chapter/section render */ }\n    </>\n    );\n};\n\nexport {AllPopoverContent};","/*\n *  The high level popover for navigation: (for use in Library.tsx)\n *  Controlled by props.context (Library Context)\n *  -> Changed with props.setContext (Library Context).\n *\n */\n\nimport {\n    IonContent,\n    IonLabel,\n    IonPopover,\n    IonSegment,\n    IonSegmentButton\n} from \"@ionic/react\";\nimport React from \"react\";\nimport {ILibraryContext} from \"../api/Interfaces\";\nimport {StatementPopoverContent} from \"./StatementPopoverContent\";\nimport {AllPopoverContent} from \"./AllPopoverContent\";\nimport update from 'immutability-helper';\n\n\ntype IPopProps = {\n    context: ILibraryContext,\n    setContext: (ctx: ILibraryContext) => void,\n    isOpen: boolean,\n    event: any,\n    onDismiss: () => void,\n};\n\nconst PopoverSelector = (props : IPopProps) => {\n    // config\n    let popoverContent : any;\n\n    /* Set the selection box based on mode */\n    if (props.context.Mode === \"statement\") {\n        popoverContent = (<StatementPopoverContent context={props.context} setContext={props.setContext} />);\n    }\n    else if (props.context.Mode === \"all\") {\n        popoverContent = (<AllPopoverContent context={props.context} setContext={props.setContext}/>);\n    }\n    else {\n        throw new Error(\"unrecognized context mode.\")\n    }\n\n    return (\n        <IonPopover id={\"popover-filter\"} event={props.event as Event} isOpen={props.isOpen}\n                    onDidDismiss={e => {\n                        props.onDismiss();\n                    }}>\n            <IonContent scrollY={false}>\n                <div id={\"filter-container\"}>\n                    <div>\n                        <IonSegment value={props.context.Mode} onIonChange={\n                            e => {\n                                if (e.detail.value !== undefined) {\n                                    props.setContext(update(props.context, {\n                                        Mode: { $set: e.detail.value }\n                                    }));\n                                }\n                            }\n                        }>\n                            <IonSegmentButton value=\"statement\">\n                                <IonLabel>Statements</IonLabel>\n                            </IonSegmentButton>\n                            {/* <IonSegmentButton value=\"saying\">\n                                <IonLabel>Sayings</IonLabel>\n                            </IonSegmentButton> */}\n                            <IonSegmentButton value=\"all\">\n                                <IonLabel>All</IonLabel>\n                            </IonSegmentButton>\n                        </IonSegment>\n                    </div>\n\n                    {/* Flexible content, configured above */}\n                    { popoverContent }\n                </div> {/* End #filter-container */}\n            </IonContent>\n        </IonPopover>\n    );\n};\n\nexport {PopoverSelector};","/*\n  Proverb Box\n  Code for Christ, 2020\n  Translation Configuration File (WEB/Lexham not yet implemented)\n\n    Note:\n      Place Translation JSON File in:\n      proverb-box-master/public/assets/translations\n*/\n\n//  Import Loaders\nimport KJVLoader from './KJV-Loader'\nimport LexhamLoader from './Lexham-Loader'\n\n//  Translation Config\nexport default {\n  \"KJV\": {\n    \"Label\": \"King James Version\",\n    \"Data\": \"./assets/translations/KJV-Proverbs.json\",\n    \"Loader\": KJVLoader,\n  },\n  \"LEB\": {\n    \"Label\": \"Lexham English Version\",\n    \"Data\": \"./assets/translations/Lexham-Proverbs.json\",\n    \"Loader\": LexhamLoader,\n  }\n}","/*\n * Provides assistance with general book of proverbs structure.\n * Translation independent\n * Code for Christ, 1/23/2020\n */\n\nimport {IBookData} from \"../api/Interfaces\"\n\nexport default class KJVLoader {\n    async Load(TranslationDataPath: string) {\n        return new Promise<IBookData>((resolve, reject) => {\n            fetch(TranslationDataPath)\n                .then((res) => res.json())\n                .then((data) => {\n                    const book : IBookData = data.verses.map((verse :any) => {\n                        return {\n                            Content: verse.text,\n                            Chapter: verse.chapter,\n                            VerseNumber: verse.verse\n                        };\n                    });\n                    resolve(book);\n                })\n                .catch((error) => {\n                    console.log(\"Error: failed to load translation asset: \", TranslationDataPath);\n                    reject(\"failed to load translation asset: \" + TranslationDataPath);\n                });\n        });\n    }\n}","import {IBookData} from \"../api/Interfaces\"\n\nexport default class LexhamLoader {\n    async Load(TranslationDataPath: string) {\n        return new Promise<IBookData>(resolve => {\n            fetch(TranslationDataPath)\n                .then((res) => res.json())\n                .then((data) => {\n                    const book : IBookData = Object.entries(data.passages).map((lexham:[string, any]) => {\n                        if (typeof lexham[1] !== \"string\") {\n                            throw Error();\n                        }\n                        return {\n                            Content: lexham[1].toString(),\n                            Chapter: parseInt(lexham[0].split(\":\")[0]),\n                            VerseNumber: parseInt(lexham[0].split(\":\")[1])\n                        };\n                    });\n                    resolve(book);\n                })\n                .catch((error) => {\n                    console.log(\"Error: failed to load translation asset.\");\n                    resolve([]);\n                });\n        });\n    }\n}","import {\n    IonAlert,\n    IonButton,\n    IonSpinner\n} from \"@ionic/react\";\nimport React, {useState} from \"react\";\nimport ContentManager from \"../api/ContentManager\"\nimport \"./TranslationToggle.css\"\nimport TranslationConfig from \"../translation-plugins/TranslationConfig\"\nimport {IModel} from \"../api/Interfaces\";\n\ntype ITranslationToggleProps = {\n    contentManager: ContentManager\n    setModel: (mdl: IModel)=>void;\n};\n\nconst TranslationToggle = (props : ITranslationToggleProps) => {\n\n    const [version, setVersion] = useState<string>(props.contentManager.GetTranslationName());\n    const [loading, setLoading] = useState<boolean>(version === \"LOADING\");\n\n    if (version === \"LOADING\")\n    {\n        props.contentManager.OnLoadTranslation(()=>{\n            setLoading(false);\n            setVersion(props.contentManager.GetTranslationName());\n        });\n    }\n\n    const [selectOpen, setSelectOpen] = useState<boolean>(false);\n\n    return (\n        <>\n            <IonButton class=\"translation-toggle\" onClick={()=>{\n                setSelectOpen(true);\n            }}>\n                {\n                    loading ? (\n                            <div className={\"spin-container\"}>\n                                <IonSpinner color=\"light\" name=\"dots\" />\n                            </div>\n                        )\n                        :\n                        (\n                            <p className={\"version-tag\"}>{version.substr(0, 4).toUpperCase()}</p>\n                        )\n                }\n\n            </IonButton>\n\n            <IonAlert\n                isOpen={selectOpen}\n                onDidDismiss={() => setSelectOpen(false)}\n                inputs={\n                    Object.entries(TranslationConfig).map(([key, translation]) => {\n                        return {\n                            name: key,\n                            type: \"radio\",\n                            label: translation.Label,\n                            value: key,\n                            checked: (props.contentManager.GetTranslationName() === key)\n                        }\n                    })\n                }\n                buttons={\n                    [{\n                        text: \"Select Translation\",\n                        handler: (data : string)=>{\n                            setLoading(true);\n                            props.contentManager.LoadTranslation(data).then(()=>{\n                                setVersion(data);\n                                setLoading(false);\n                                props.setModel(props.contentManager.GetModel());\n                            })\n                        }\n\n                    }]\n                }\n            />\n        </>\n    );\n};\n\nexport {TranslationToggle};\n","\nexport default {\n    typeDisplay: \"statement\",\n    filterFormat: \"chapter\",\n    chapter: {\n        statement: 10,\n        saying: 15,\n        all: 1\n    },\n    section: {\n        statement: {\n            SectionNumber: 10,\n            Part: 0\n        },\n        saying: {\n            SectionNumber: 10,\n            Part: 0\n        },\n        all: {\n            SectionNumber: 0,\n            Part: 0\n        }\n    },\n    translation: \"LEB\",\n    browseMode: \"descriptor\"\n\n}","/*\n * Provides assistance with general book of proverbs structure.\n * Translation independent\n * Code for Christ, 1/23/2020\n */\n\nimport {IVerseSignature, IVerseMeta, IVerse} from \"./Interfaces\"\nimport structure from \"../indexing/ProverbsStructure.json\"\nimport sayingsStructure_Any from '../indexing/Sayings.json'\nimport statementStructure_Any from '../indexing/Statements.json'\n\ntype ISayingIndex = {\n    Ch: number,\n    Vs: number\n};\n\ntype ISayingRange = {\n    Start: ISayingIndex,\n    End: ISayingIndex\n};\n\ntype IStatementRange = {\n    Title: string,\n    Intro: {\n        Ch: number,\n        Vs: number,\n        Part: boolean\n    }\n    Start: ISayingIndex,\n    End: ISayingIndex\n};\n\ntype IStatementRanges = Array<IStatementRange>;\n\ntype IStatementStructure = {\n    _comment: string,\n    Range: IStatementRanges\n};\n\ntype ISayings = Record<string, ISayingRange>;\n\ntype ISayingSection= {\n    Title: string\n    Sayings: ISayings\n};\n\ntype ISayingSections = Array<ISayingSection>;\ntype ISayingStructure = {\n    _comment: string,\n    Sections: ISayingSections\n};\n\nexport default class Indexer {\n\n    /*\n     * Methods (All Static)\n     *  static GetVerseID(Chapter: number, Verse: number)\n     *  static GetVerseSignature(VerseID: number)\n     *  static PermuteVerses()\n     *  static IsVerseBetween(verse: IVerseSignature, start: IVerseSignature, end: IVerseSignature)\n     *  static GetVerseType(VerseID: number): IVerseMeta\n     *  static LoadVerseMetadata(verse: IVerseSignature)\n     *  static SearchVerseHighlight(verse: IVerse, pattern: string): boolean\n     *  static SearchVerseClear(verse: IVerse)\n     */\n\n    static GetVerseID(Chapter: number, Verse: number) {\n        return Chapter * 1000 + Verse;\n    }\n\n    static GetVerseSignature(VerseID: number) {\n        let verse : IVerseSignature = {\n            Chapter: Math.floor(VerseID/1000),\n            VerseNumber: VerseID % 1000\n        };\n        return verse;\n    }\n\n    static PermuteVerses() {\n        /* accumulate chapter verses */\n        let verses : Array<IVerseSignature> = Object.entries(structure.Verses).reduce(\n            (v : Array<IVerseSignature>, args : [string, number]) => {\n                const [chapter, verseNumber] = args;\n\n                /* chapter verses */\n                for (let i = 0; i < verseNumber; ++i) {\n                    const verse: IVerseSignature = {\n                        Chapter: parseInt(chapter),\n                        VerseNumber: i + 1\n                    };\n                    v.push(verse);\n                }\n                return v;\n            }\n        , []);\n        return verses;\n    }\n\n    static IsVerseBetween(verse: IVerseSignature, start: IVerseSignature, end: IVerseSignature)\n    {\n        // chapter bounds\n        if (verse.Chapter < start.Chapter || verse.Chapter > end.Chapter)\n        {\n            return false;\n        }\n\n        // verse bounds\n        if ((verse.Chapter === start.Chapter && verse.VerseNumber < start.VerseNumber)\n            || (verse.Chapter === end.Chapter && verse.VerseNumber > end.VerseNumber))\n        {\n            return false;\n        }\n\n        // in bounds\n        return true;\n    }\n\n    static GetVerseType(VerseID: number): IVerseMeta {\n        const sayingsStructure: ISayingStructure = sayingsStructure_Any;\n        const statementStructure: IStatementStructure = statementStructure_Any;\n        const verse = this.GetVerseSignature(VerseID);\n\n        const isSaying = () => {\n\n            for (const [secID, section] of Object.entries(sayingsStructure.Sections))\n            {\n                for (const [sayID, sayingRange] of Object.entries(section.Sayings))\n                {\n                    // check in range\n                    const start: IVerseSignature = {\n                        Chapter: sayingRange.Start.Ch,\n                        VerseNumber: sayingRange.Start.Vs\n                    };\n                    const end: IVerseSignature = {\n                        Chapter: sayingRange.End.Ch,\n                        VerseNumber: sayingRange.End.Vs\n                    };\n                    const inRange: boolean = this.IsVerseBetween(verse, start, end);\n\n                    // found range\n                    if (inRange) {\n                        const gID: number = parseInt(secID + 1) * 1000 + parseInt(sayID);\n                        return {\n                            found: true,\n                            types: [\"Saying\"],\n                            group: gID\n                        }\n                    }\n                }\n            }\n\n            // not found in records\n            return {\n                found: false\n            };\n        };\n\n        const isStatement = () => {\n            for (const range of statementStructure.Range) {\n                // check in range\n                const start: IVerseSignature = {\n                    Chapter: range.Start.Ch,\n                    VerseNumber: range.Start.Vs\n                };\n                const end: IVerseSignature = {\n                    Chapter: range.End.Ch,\n                    VerseNumber: range.End.Vs\n                };\n                const inRange: boolean = this.IsVerseBetween(verse, start, end);\n                // found\n                if (inRange) {\n                    if (verse.Chapter === range.Intro.Ch\n                        && verse.VerseNumber === range.Intro.Vs)\n                    {\n                        // part\n                        if (range.Intro.Part)\n                        {\n                            return {\n                                found: true,\n                                types: [\"Title\",\"Statement\"]\n                            };\n                        }\n                        else\n                        {\n                            return {\n                                found: true,\n                                types: [\"Title\"],\n                                group: VerseID\n                            };\n                        }\n                    }\n                    return {\n                        found: true,\n                        types: [\"Statement\"],\n                        group: VerseID\n                    };\n                }\n            }\n            return {\n                found: false\n            };\n        };\n\n        // return values\n        const sayingRes = isSaying();\n        if (sayingRes.found) {return sayingRes;}\n\n        const statementRes = isStatement();\n        if (statementRes.found) {return statementRes;}\n        return {\n            found: true,\n            types: [\"Article\"],\n            group: verse.Chapter, // FOR NOW: all articles are bundled by Chapter.\n        };\n    }\n\n    static LoadVerseMetadata(verse: IVerseSignature) {\n        const meta = this.GetVerseType(this.GetVerseID(verse.Chapter, verse.VerseNumber));\n        if (meta.types) {\n            verse.Type = meta.types[0];\n            if (meta.types.length === 2)\n            {\n                verse.Type = meta.types[1];\n                verse.TitlePrefix = \"placeholder\"; // will be filled with the title verse\n            }\n        }\n        if (meta.group) {\n            verse.GroupID = meta.group\n        }\n    }\n\n    static SearchVerseHighlight(verse: IVerse, pattern: string): boolean {\n        const regex = new RegExp(pattern, \"gi\");\n        let result: RegExpExecArray | null;\n        let test = false;\n\n        while ((result = regex.exec(verse.Content)) !== null) {\n            test = true;\n            if (!verse.SearchHighlights)\n            {\n                verse.SearchHighlights = [];\n            }\n\n            // Push highlights\n            verse.SearchHighlights.push({\n                iStart: result.index,\n                iEnd: result.index + result[0].length\n            });\n        }\n\n        return test;\n    }\n\n    static SearchVerseClear(verse: IVerse) {\n        verse.SearchHighlights = undefined;\n    }\n}","import {\n    IonContent,\n    IonHeader,\n    IonIcon,\n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonSearchbar,\n    IonButton,\n    IonButtons,\n    IonGrid,\n    IonRow, withIonLifeCycle, IonModal\n} from '@ionic/react';\nimport { book, ellipsisVerticalOutline } from 'ionicons/icons';\nimport React from 'react';\nimport './Library.css';\n\nimport ContentManager from \"../api/ContentManager\";\nimport {IArticle, IModel, ISaying, IStatement, ILibraryContext, ISection, IVerseSignature} from \"../api/Interfaces\";\nimport {Article} from \"../components/Article\";\nimport {Saying} from \"../components/Saying\";\nimport {Statement} from \"../components/Statement\";\nimport {PopoverSelector} from \"../components/PopoverSelector\";\nimport {TranslationToggle} from \"../components/TranslationToggle\";\nimport ProverbsStructure from \"../indexing/ProverbsStructure.json\";\n\nimport DefaultConfig from \"./DefaultDisplayConfig\";\nimport Indexer from \"../api/Indexer\";\n\ntype ILibraryProps = {\n  contentManager: ContentManager\n}\n\ntype ILibraryState = {\n    searchContent: string,\n    popClickEvent: any,\n    popOpen: boolean,\n    model: IModel,\n    context: ILibraryContext,\n    scrollStamp: number,\n    showVerseOptions: boolean\n}\n\nclass Library extends React.Component<ILibraryProps, ILibraryState>\n{\n    /* Member data */\n    private cm : ContentManager;\n    private ref : any;\n\n    constructor(props: ILibraryProps) {\n        super(props);\n\n        this.cm = this.props.contentManager;\n        this.ref = React.createRef();\n\n        this.state = {\n            //proverbs: this.props.proverbProvider.GetAllOneLiners(),\n            searchContent: \"\",\n            popClickEvent: undefined,\n            popOpen: false,\n            model: this.cm.GetModel(), // A blank model\n            context: {\n                Mode: DefaultConfig.typeDisplay,\n                Chapter: (DefaultConfig.chapter as {[key: string]: number;}),\n                Section: (DefaultConfig.section as {[key: string]: ISection;}),\n                BrowseMode: (DefaultConfig.browseMode)\n            },\n            scrollStamp: 0,\n            showVerseOptions: false\n        };\n\n        // Non-persistant translation for now.\n        this.cm.LoadTranslation(DefaultConfig.translation)\n            .then(() => {\n                this.cm.ApplyFilter(\"ByType\", this.state.context.Mode);\n                this.cm.ApplyFilter(\"ByChapter\", this.state.context.Chapter[DefaultConfig.typeDisplay]);\n                this.setState({\n                    model: this.cm.GetModel()\n                });\n            });\n    }\n\n    // calling setContext should update the library's view (via content manager)\n    setContext = (ctx: ILibraryContext) =>\n    {\n        console.log(\"setting context: \", ctx);\n        this.cm.ClearFiltersNoRefresh();\n        this.cm.ApplyFilter(\"ByType\", ctx.Mode);\n        if (ctx.BrowseMode === \"chapter\" || ctx.Mode === \"statement\") {\n            this.cm.ApplyFilter(\"ByChapter\", Number(ctx.Chapter[ctx.Mode]));\n        }\n\n        // descriptor browse\n        else {\n            const span = ProverbsStructure.Sections[ctx.Section[ctx.Mode].SectionNumber];\n            const spanStart : IVerseSignature = {\n                Chapter: span.Start.Ch,\n                VerseNumber: span.Start.Vs\n            };\n            const spanEnd : IVerseSignature = {\n                Chapter: span.End.Ch,\n                VerseNumber: span.End.Vs\n            };\n            const chapter = span.Start.Ch + ctx.Section[ctx.Mode].Part;\n            this.cm.ApplyFilter(\"BySpan\", spanStart, spanEnd);\n            this.cm.ApplyFilter(\"ByChapter\", chapter);\n        }\n\n        // update the library's context\n        this.setState({context: ctx});\n\n        // update the model\n        this.setState({\n            model: this.cm.GetModel()\n        });\n    };\n\n    setModel = (mdl : IModel) => {\n        this.setState({model: mdl});\n    };\n\n    /* Verse model for saving verse in folder */\n    openVerseOptions = (verseID: number) => {\n        this.setState({\n            showVerseOptions: true\n        })\n    }\n\n    // life cycle\n    ionViewWillEnter() {\n        this.cm.RestoreFilters(\"library\");\n    }\n\n    ionViewDidLeave() {\n        this.cm.CacheFilters(\"library\");\n    }\n\n    onSearch(text: string) {\n        this.cm.UpdateSearch(text);\n\n        // update the model\n        this.setState({\n            model: this.cm.GetModel()\n        });\n    }\n\n    onSearchClear() {\n        this.cm.UpdateSearch(\"\");\n    }\n\n    scrollHandler = (e: any) => {\n        this.setState({\n            scrollStamp: e.timeStamp\n        });\n    }\n\n    heartHandler = (statementModel : IStatement) => {\n        if (statementModel.Saved) {\n            console.log(\"Removing heart\");\n            this.cm.RemoveBookmark(\n                {\n                    Chapter: statementModel.Verse.Chapter,\n                    VerseNumber: statementModel.Verse.VerseNumber\n                }\n            );\n        } else {\n            console.log(\"adding heart\");\n            this.cm.Bookmark(\n                {\n                    Chapter: statementModel.Verse.Chapter,\n                    VerseNumber: statementModel.Verse.VerseNumber\n                }\n            );\n        }\n        this.setState({model: this.cm.GetModel()});\n    }\n\n    render() {\n\n        let elements: Array<{\n            key: number,\n            element: any\n        }> = [];\n\n        this.state.model.ComponentModels.forEach((c) => {\n            if (c.Type === \"Article\")\n            {\n                const keyVerse = (c.Model as IArticle).Verses[0];\n                elements.push({\n                    key: Indexer.GetVerseID(keyVerse.Chapter, keyVerse.VerseNumber),\n                    element: (<Article ctx={this.state.context} model={(c.Model as IArticle)}></Article>)\n                });\n            }\n            else if (c.Type === \"Statement\")\n            {\n                const statementModel = (c.Model as IStatement);\n                elements.push({\n                    key: Indexer.GetVerseID(statementModel.Verse.Chapter, statementModel.Verse.VerseNumber),\n                    element: (\n                        <div style={{width: \"20em\"}} >\n                        <Statement\n                            model={statementModel}\n                            heartCallback={() => {this.heartHandler(statementModel)}}\n                            scrollStamp={this.state.scrollStamp}\n                            openVerseOptions={this.openVerseOptions}\n                            searchHighlights={statementModel.Verse.SearchHighlights}\n                            >\n                        </Statement>\n                        </div>)\n                });\n            }\n            else if (c.Type === \"Saying\")\n            {\n                const keyVerse = (c.Model as ISaying).Verses[0];\n                elements.push({\n                    key: Indexer.GetVerseID(keyVerse.Chapter, keyVerse.VerseNumber),\n                    element: (<Saying model={(c.Model as ISaying)}></Saying>)\n                });\n            }\n        });\n\n        /*if this.state.model ==\n            let proverbDisplay :any = this.state.proverbs.slice(0, 30).map((prov:IProverb) => {\n            return (<Proverb key={prov.ID} Proverb={prov}></Proverb>);\n        });*/\n        console.log(\"rendering library\");\n        let pageRef = React.createRef<any>();\n        \n        return (\n            <IonPage className={\"library-page\"} ref={pageRef}>\n\n                <IonHeader>\n                    <PopoverSelector context={this.state.context}\n                                     setContext={this.setContext}\n                                     isOpen={this.state.popOpen}\n                                     event={this.state.popClickEvent}\n                                     onDismiss={() => {\n                                         this.setState({\n                                             popOpen: false,\n                                             popClickEvent: undefined\n                                         });\n                                     }}\n                                     />\n                    <IonToolbar>\n                        <IonButtons slot={\"start\"}>\n                            <IonButton onClick={(e : any) => {\n                                e.persist();\n                                this.setState({\n                                    popClickEvent: e,\n                                    popOpen: true\n                                });\n                                //this.setState({popOpen: true});\n                                }}>\n                                <IonIcon slot = \"icon-only\" icon = {book} />\n                            </IonButton>\n                            <TranslationToggle contentManager={this.cm} setModel={this.setModel}/>\n                        </IonButtons>\n                        <IonTitle>Library</IonTitle>\n                    </IonToolbar>\n                    <IonToolbar>\n                        <IonSearchbar\n                            onIonChange={(e)=>{this.onSearch(e.detail.value!)}}\n                            onIonClear={(e) => this.onSearchClear()}\n                        ></IonSearchbar>\n                    </IonToolbar>\n                </IonHeader>\n                <IonContent className={\"proverb-panel\"}\n                    scrollEvents={true}\n                    onIonScrollStart={this.scrollHandler}\n                >\n                    <IonModal\n                        isOpen={this.state.showVerseOptions}\n                        swipeToClose={true}\n                        presentingElement={pageRef.current}\n                        onDidDismiss={()=>{this.setState({showVerseOptions: false})}}>\n                        <div id={\"parentmodeldiv\"}>\n                            <div id={\"modeldiv\"}>\n                                <p>Folder 1</p>\n                                <p>Folder 2</p>\n                                <p>Folder 3</p>\n                                <IonButton onClick={()=>{this.setState({showVerseOptions: false})}}>Close Example</IonButton>\n                            </div>\n                        </div>\n\n                        {/*/!* Erase and redesign modal ___*!/*/}\n                        {/*<IonButton onClick={()=>{this.setState({showVerseOptions: false})}}>Close Example</IonButton>*/}\n                        {/*<p>Model content (A)</p>*/}\n                        {/*<p>Model content (B)</p>*/}\n                        {/*/!* Erase and redesign modal ^^^ *!/*/}\n\n                    </IonModal>\n                    <IonGrid>\n                        {\n                            elements.map(component => (\n                                <IonRow key={component.key} className={\"ion-justify-content-center\"}>\n                                    {component.element}\n                                </IonRow>\n                            ))\n                        }\n                        \n                    </IonGrid>\n                    <div className=\"next-button-container\">\n                        <IonButton fill={\"clear\"} className=\"next-button\"\n                            onClick={()=>{console.log(\"Hello\")}}\n                        >\n                            <IonIcon icon = {ellipsisVerticalOutline}></IonIcon>\n                        </IonButton>\n                    </div>\n                    \n                </IonContent>\n            </IonPage>\n        );\n    }\n}\n\nexport default withIonLifeCycle(Library);\n","import { Plugins } from '@capacitor/core';\nimport {IVerse} from \"./Interfaces\"\n\nconst { LocalNotifications } = Plugins;\nconst { Storage } = Plugins;\n\nexport default class NotificationsAssistant{\n\n\tMAX_NOTIFICATIONS:number = 2;//64;\n\tid:number = 0\n\tfrequency:number = 0\n\tstart:number = -1\n\tend:number = -1\n\n\t//list of verses\n\tverses:Array<IVerse> = []\n\n\tBakeNotification(frequency:Number, start:Number, end:Number, listOfVerses:Array<IVerse>){\n\n\t\t//start and end in military time in HHMM format from 0000 to 2359\n\t\tthis.SetFrequency(frequency)\n\t\tthis.SetNotificationHourRange(start,end)\n\t\tthis.SetNotificationContent(listOfVerses)\n\t\tthis.NotificationSetter()\n\t}\n\n\tSetFrequency(frequency:Number){\n\t\tStorage.set({\n\t\t\tkey: \"frequency\",\n\t\t\tvalue: frequency.toString()\n\t\t})\n\t}\n\n\tSetNotificationHourRange(start:Number, end:Number){\n\t\tStorage.set({\n\t\t\tkey: \"start\",\n\t\t\tvalue: start.toString()\n\t\t})\n\t\tStorage.set({\n\t\t\tkey: \"end\",\n\t\t\tvalue: end.toString()\n\t\t})\n\t}\n\n\tSetNotificationContent(listOfVerses:Array<IVerse>){\n\t\tStorage.set({\n\t\t\tkey: \"verses\",\n\t\t\tvalue: JSON.stringify(listOfVerses)\n\t\t})\n\t}\n\n\tasync GetFrequency() : Promise<number>{\n\t\tvar frequencyStore = await Storage.get({ key: 'frequency' })\n\t\tvar frequency:number = 0;\n\t\tif(frequencyStore.value!=null){\n\t\t\tfrequency = parseInt(frequencyStore.value)\n\t\t}\n\n\t\treturn frequency\n\t}\n\n\tasync GetStart() : Promise<number>{\n\t\tvar startStore = await Storage.get({ key: 'start' })\n\t\tvar start:number = 0;\n\t\tif(startStore.value!=null){\n\t\t\tstart = parseInt(startStore.value)\n\t\t}\n\n\t\treturn start\n\t}\n\n\tasync GetEnd() : Promise<number>{\n\t\tvar endStore =  await Storage.get({ key: 'end' });\n\t\tvar end:number = 0;\n\t\tif(endStore.value!=null){\n\t\t\tend = parseInt(endStore.value)\n\t\t}\n\n\t\treturn end\n\t}\n\n\tasync GetContent() : Promise<Array<IVerse>>{\n\t\tvar content = await Storage.get({key:'verses'});\n\t\tvar v = []\n\t\tif(content.value!=null){\n\t\t\tv = await JSON.parse(content.value)\n\t\t}\n\t\treturn v\n\t}\n\n\tasync LoadParams(){\n\t\tthis.frequency = await this.GetFrequency()\n\t\tthis.start = await this.GetStart()\n\t\tthis.end = await this.GetEnd()\n\t\tthis.verses = await this.GetContent()\n\t}\n\n\tasync ClearNotifications(){\n\n\t\tconst pending = await Plugins.LocalNotifications.getPending()\n\t\tif(pending.notifications.length != 0){\n\t\t\tPlugins.LocalNotifications.cancel(pending)\n\t\t}\n\t\t //clear all the pending notifications\n\t\tthis.frequency = 0\n\t\tthis.start = 0\n\t\tthis.end = 0\n\t\tthis.verses = []\t\t\n\t}\n\n\tasync NotificationSetter(){\n\n\t\t//Plugins.LocalNotifications.requestPermissions()\n\n\t\t//Clear pending notifications\n\t\tawait this.ClearNotifications()\n\t\n\t\t//Get the information from the storage\n\t\tawait this.LoadParams()\n\n\t\t// ensure that notifications have been set\n\t\tif (this.verses.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\t//Get today's date\n\t\t//want to set today's time to 00H00M00S\n\t\tvar dateToday = new Date()\n\t\tdateToday = new Date(dateToday.getFullYear(), dateToday.getMonth(), dateToday.getDate()) \n\n\t\t\n\t\t//convert end and start to millisecond\n\t\tvar endHour:number = Math.floor(this.end/100)\n\t\tvar endMinute:number = this.end%100\n\t\t\n\t\tvar startHour:number = Math.floor(this.start/100)\n\t\tvar startMinute:number = this.start%100\n\t\t\n\t\tvar endMillisecond = (endHour*60*60*1000) + (endMinute*60*1000)\n\t\tvar startMillisecond = (startHour*60*60*1000) + (startMinute*60*1000)\n\n\t\tvar interval = (endMillisecond - startMillisecond)/this.frequency\n\t\t\n\t\tlet scheduledCount = 0;\n\t\tlet day = 0;\n\t\twhile(scheduledCount < this.MAX_NOTIFICATIONS){\n\t\t\tvar time = startMillisecond\n\n\t\t\tfor(let f=0; f < this.frequency; ++f){\n\n\t\t\t\t// retrieve random verse content\n\t\t\t\tvar randomVerse = this.verses[this.getRandomIndex(this.verses.length)]\n\t\t\t\tvar verseTitle = \"Proverbs \" + randomVerse.Chapter + \":\" + randomVerse.VerseNumber\n\t\t\t\tvar verseContent = randomVerse.Content\n\n\t\t\t\t//Each day has 24 hours\n\t\t\t\t//Each hour has 60 minute\n\t\t\t\t//Each minute = 60 seconds\n\t\t\t\t//1 second = 1000 milliseconds \n\t\t\t\tLocalNotifications.schedule({\n\t\t\t\t\tnotifications:[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle:verseTitle,\n\t\t\t\t\t\t\tbody:verseContent,\n\t\t\t\t\t\t\tid:(day*24*60*60*1000) + time,\n\t\t\t\t\t\t\tschedule:{at: new Date(dateToday.getTime() + (day*24*60*60*1000) + time )}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tscheduledCount++;\n\t\t\t\tif (scheduledCount >= this.MAX_NOTIFICATIONS) { break; }\n\t \n\t\t\t\tconsole.log(new Date(dateToday.getTime() + (day*24*60*60*1000) + time )) //need to convert our time to Local Time\n\n\t\t\t\t//increase time\n\t\t\t\ttime += interval\n\n\t\t\t\t//increment id\n\t\t\t\tthis.id++\n\t\t\t}\n\t\t\tday++\n\t\t}\n\n\t\tconsole.log(LocalNotifications.getPending())\n\t}\n\n\tgetRandomIndex(length:number) {\n  \t\treturn Math.floor(Math.random() * Math.floor(length));\n\t}\n}\n","import React, {useState} from 'react';\nimport {\n    IonMenu,\n    IonPopover,\n    IonIcon,\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonItem,\n    IonLabel,\n    IonList,\n    IonPage,\n    IonToolbar,\n    IonButtons,\n    IonTitle,\n    IonMenuToggle\n} from '@ionic/react';\n\nimport { Plugins } from '@capacitor/core';\n\nimport {folder, notifications, notificationsOutline, notificationsCircleOutline} from 'ionicons/icons';\nimport \"./Bookmarked.css\";\n\nimport NotificationsAssistant from \"../api/NotificationsAssistant\"\nimport {IVerse} from \"../api/Interfaces\"\n\n\n\nconst Bookmarked: React.FC = () => {\n\n    const [showPopover, setShowPopover] = useState(false);\n    const [notificationToggle, setNotificationToggle] = useState(false);\n    const [newFolderMode, setNewFolderMode] = useState(false);\n    return (\n        <>\n            <IonPage className={\"bookmarked-page\"}>\n\n                {/* Folder Menu */}\n                <IonMenu side=\"start\" contentId=\"folders-menu-content\">\n                    <IonHeader mode={\"md\"}>\n                        <IonToolbar color=\"primary\">\n                            <IonButtons slot=\"start\">\n                                <IonButton>\n                                    <IonIcon icon={folder} />\n                                </IonButton>\n                            </IonButtons>\n                            <IonButtons slot=\"end\">\n                                <IonButton onClick={() => setNotificationToggle(!notificationToggle)}>\n                                    {\n                                        (notificationToggle) ? <IonIcon icon={notifications}/>\n                                                             : <IonIcon icon={notificationsOutline}/>\n                                    }\n                                </IonButton>\n                            </IonButtons>\n                            <IonTitle slot=\"start\">Folder</IonTitle>\n                        </IonToolbar>\n                        <div className={`select-all-default ${notificationToggle ? \"select-all-revealed\" : \"\"}`}>\n                            <div className=\"half-container-left\">\n                                <IonButton mode={\"ios\"} fill=\"clear\" expand=\"block\" size=\"small\">Select All</IonButton>\n                            </div>\n                            <div className=\"half-container-right\">\n                                <IonButton mode={\"ios\"} fill=\"clear\" expand=\"block\" size=\"small\">Deselect All</IonButton>\n                            </div>\n                        </div>\n                        <div className={`new-folder-default \n                            ${(notificationToggle) ? \"new-folder-hidden\" : \"\"}\n                            ${(newFolderMode) ? \"blink\" : \"\"}`\n                        }\n                            onClick={() => {setNewFolderMode(true); console.log(\"entering new folder mode.\")}}>\n                            <h3>New Folder</h3>\n                        </div>\n                    </IonHeader>\n                    <IonContent id=\"folders-menu-content\" onClick={()=>{console.log(\"clicked!!!\")}}>\n                        <div className=\"category-list-container ion-activateable\" style={{pointerEvents: \"auto\"}}>\n                            <IonList className=\"folder-list\">\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Wisdom Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Stewardship Verses\n                                </IonItem>\n                                <IonItem button detail>\n                                    <IonIcon icon={notificationsCircleOutline}\n                                        className={`notification-default ${(notificationToggle) ? 'notification-revealed' : ''}`}></IonIcon>\n                                    Menu Item\n                                </IonItem>\n                            </IonList>\n                        </div>\n                        <div className={\"button-holder\"}>\n                            <IonButton shape={\"round\"} class={\"set-notification-button\"}>Set Notifications</IonButton>  \n                        </div>\n                        \n                    </IonContent>\n                </IonMenu>\n\n                {/* Bookmarks Page */}\n                <IonHeader>\n                    <IonToolbar>\n                        <IonButtons slot=\"start\">\n                            <IonMenuToggle>\n                                <IonButton>\n                                    <IonIcon slot=\"icon-only\" icon={folder} />\n                                </IonButton>\n                            </IonMenuToggle>\n                        </IonButtons>\n                        <IonTitle> Bookmarks </IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n                <IonContent>\n\n                    <IonPopover isOpen={showPopover} onDidDismiss={e => {\n                        setShowPopover(false);\n\n                        //Use this popover to test the notification temporarily\n                        \n                        console.log(\"Pop\")\n\n                        //Use this popover to test the notification temporarily\n                        let notificationAssistant = new NotificationsAssistant();\n                        \n                        //get current date\n                        var d = new Date();\n\n                        //start is the current time + some constant\n                        var start = d.getHours() * 100 + d.getMinutes() + 1;\n\n                        //end is the start plus some random time \n                        var end = start + 1;\n\n                        //var verses:IVerse[] = [];\n\n                        var verses = [{Chapter:1, VerseNumber:10, Content:\"My son, if sinful men entice you, do not give in to them\"},\n        {Chapter:1, VerseNumber:15, Content: \"my son, do not go along with them, do not set foot on their paths\"}\n        ]\n\n                       \n                        notificationAssistant.BakeNotification(2, start, end, verses);\n\n\n\n\n                        /*Plugins.LocalNotifications.schedule({\n                            notifications:[{\n                            title:'title',\n                            body:'text',\n                            id:1,\n                            schedule: { at: new Date(Date.now() + 10) }\n                        }]\n                        })*/\n\n          \n                    }} >\n                 \n                        <p>This is popover</p>\n                    </IonPopover>\n\n                    <IonMenuToggle><IonButton expand=\"full\">Open Menu</IonButton></IonMenuToggle>\n                    <IonButton expand=\"full\" onClick={() => setShowPopover(true)}>\n                        Open Popover\n                    </IonButton>\n\n                    <IonList>\n                        <IonItem routerLink=\"/bookmarked/details\">\n                            <IonLabel>\n                                <h2>Go to detail</h2>\n                            </IonLabel>\n                        </IonItem>\n                    </IonList>\n                </IonContent>\n            </IonPage>\n        </>\n    );\n};\n\nexport default Bookmarked;\n","import React from 'react';\nimport {\n    IonIcon,\n    IonHeader,\n    IonToolbar,\n    IonPage,\n    IonTitle,\n    IonContent,\n    IonGrid, IonCol, IonRow, withIonLifeCycle, IonButton\n} from '@ionic/react';\nimport {\n    CreateAnimation\n} from \"@ionic/react\";\nimport ContentManager from \"../api/ContentManager\";\nimport {Statement} from \"../components/Statement\"\nimport {IStatement} from \"../api/Interfaces\";\nimport update from \"immutability-helper\";\nimport \"./Discover.css\";\nimport {chevronBackOutline, chevronForwardOutline} from \"ionicons/icons\";\n\ntype IDiscoverProps = {\n    contentManager: ContentManager\n}\n\ntype IDiscoverState = {\n    allStatements: Array<IStatement>,\n    selectedStatements: Array<IStatement>,\n    head: number\n}\n\nconst SelectRandom = (pool: Array<IStatement>) => {\n    console.log(\"selected random\");\n    return pool[Math.floor(Math.random() * pool.length)];\n};\n\nclass Discover extends React.Component<IDiscoverProps, IDiscoverState> {\n\n    private proverbCenterRef: React.RefObject<CreateAnimation> = React.createRef();\n\n    constructor(props : IDiscoverProps) {\n        super(props);\n        this.state = {\n            allStatements: [],\n            selectedStatements: [],\n            head: -1\n        };\n    }\n\n    // life cycle\n    ionViewWillEnter() {\n        if (this.props.contentManager.IsTranslatationReady()) {\n            if (this.state.allStatements.length === 0) {\n\n                this.props.contentManager.ClearFiltersNoRefresh();\n                this.props.contentManager.ApplyFilter(\"ByType\", \"statement\");\n\n                this.setState({\n                    allStatements: this.props.contentManager.GetModel().ComponentModels.map(comp => {\n                        return (comp.Model as IStatement);\n                    })\n                });\n            }\n\n            this.foward();\n        }\n    };\n\n    foward = () => {\n        this.setState(cur => {\n            if (cur.head === cur.selectedStatements.length - 1) {\n                return {\n                    selectedStatements: update(cur.selectedStatements, {$push: [SelectRandom(this.state.allStatements)]}),\n                    head: (cur.head) + 1\n                };\n            }\n\n            return {\n                selectedStatements: cur.selectedStatements,\n                head: (cur.head) + 1\n            };\n        });\n    };\n\n    back = () => {\n        if (this.state.head > 0) {\n            this.setState(cur => {\n                return {\n                    head: (cur.head) - 1\n                }\n            });\n        }\n    };\n\n    render() {\n        return (\n            <>\n                <IonPage>\n                    <IonHeader>\n                        <IonToolbar>\n                            <IonTitle>Discover</IonTitle>\n                        </IonToolbar>\n                    </IonHeader>\n\n                    <IonContent className={\"discover-content\"}>\n                        <IonGrid>\n                            <IonRow justify-content-center align-items-center>\n                                <IonCol size={\"1\"} className={\"button-col\"}>\n                                    <IonButton expand=\"full\" size={\"small\"} disabled={this.state.head === 0} fill={\"clear\"} className={\"back-button\"} onClick={this.back}\n                                    ><IonIcon icon={chevronBackOutline}/></IonButton>\n                                </IonCol>\n                                <IonCol size={\"10\"} align-self-center>\n                                    { /*<CreateAnimation\n                                        ref={this.proverbCenterRef}\n                                        fill=\"none\"\n                                        duration={1000}\n                                        keyframes={[\n                                            { offset: 0, transform: 'scale(1) rotate(0)' },\n                                            { offset: 0.5, transform: 'scale(1.2) rotate(45deg)' },\n                                            { offset: 1, transform: 'scale(1) rotate(0deg)' }\n                                        ]}\n                                    >\n                                    </CreateAnimation>\n                                    */}\n                                    <div id={\"proverb-center\"}>\n                                        {\n                                            (this.state.selectedStatements.length > 0)\n                                                ? <Statement\n                                                    model={this.state.selectedStatements[this.state.head]}\n                                                    heartCallback={() => {}}\n                                                    scrollStamp={0}\n                                                    openVerseOptions={() => {}}\n                                                    />\n                                                : <></>\n                                        }\n                                    </div>\n\n                                </IonCol>\n                                <IonCol size={\"1\"} className={\"button-col\"}>\n                                    <IonButton size={\"small\"} fill={\"clear\"} className={\"forward-button\"} onClick={this.foward}>\n                                        <IonIcon icon={chevronForwardOutline}/>\n                                    </IonButton>\n                                </IonCol>\n                            </IonRow>\n                        </IonGrid>\n                    </IonContent>\n                </IonPage>\n            </>\n        )\n    }\n};\n\nexport default withIonLifeCycle(Discover);\n","import React from 'react';\nimport { IonBackButton, IonButtons, IonHeader, IonPage, IonToolbar, IonTitle, IonContent } from '@ionic/react';\n\nconst Details: React.FC = () => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/bookmarked\" />\n          </IonButtons>\n          <IonTitle>Detail</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <p>Details</p>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Details;\n","/*\n * Provides assistance with general book of proverbs structure.\n * Translation independent\n * Code for Christ, 1/23/2020\n */\n\nimport {IBookData, IVerse} from \"./Interfaces\"\nimport TranslationConfig from '../translation-plugins/TranslationConfig'\nimport Indexer from './Indexer'\n\nexport default class TranslationMap\n{\n    private book : IBookData;\n    private translationName: string;\n    private onLoadedCallbacks: Array<(success: boolean)=>void>;\n\n    constructor()\n    {\n        this.book = [];\n        this.translationName = \"NONE\";\n        this.onLoadedCallbacks = [];\n    }\n\n    GetTranslationName()\n    {\n        return this.translationName;\n    }\n\n    IsReady()\n    {\n        return !(this.translationName === \"LOADING\" || this.translationName === \"NONE\");\n    }\n\n    IsLoading()\n    {\n        return this.translationName === \"LOADING\";\n    }\n\n    /*\n        Add a callback which will trigger on the completion of load translation.\n        Call in the same stack frame as IsLoading(); No Race conditions will occur due to JS.\n     */\n    AddOnLoadedCallback(callback: (success: boolean)=>void)\n    {\n        if (this.IsReady())\n        {\n            callback(true);\n            return;\n        }\n        this.onLoadedCallbacks.push(callback);\n    }\n\n     /*\n        Loads a translation of the book of proverbs\n     */\n    LoadTranslation(TranslationName: string)\n    {\n        // Cache check\n        if (this.translationName === TranslationName)\n        {\n            // Push to asynch callback queue (for homogeneity)\n            setTimeout(()=>{\n                this.TriggerCallbacks();\n                }, 0);\n            return;\n        }\n\n        // Init\n        this.translationName = \"LOADING\";\n\n        // Get matching loader\n        const loaderData = Object.entries(TranslationConfig).filter((trans) => {\n            return (trans[0] === TranslationName);\n        })[0][1];\n\n        // Load\n        const loaderInstance = new loaderData.Loader();\n        loaderInstance.Load(loaderData.Data).then((book: IBookData) => {\n            this.book = book;\n            this.translationName = TranslationName;\n            this.TriggerCallbacks();\n        });\n    }\n\n    private TriggerCallbacks() {\n        // Callback hook\n        // add all callbacks to a callbackQueue\n        const callbackQueue = this.onLoadedCallbacks;\n        callbackQueue.forEach((c) => {\n            // Push callbacks to async queue. this will allow for handling nested Loads and callbacks.\n            setTimeout(()=> {\n                c(true);\n            }, 0);\n        });\n\n        // Erase Callbacks\n        this.onLoadedCallbacks = [];\n    }\n\n    /*\n        Usage: After LoadTranslation is called and a success is fired, call Get Content.\n        Alternatively, check if IsLoading() and if so, then add a callback\n\n        Note: If the following function turns out to be too slow, convert VerseID to contiguous,\n        then verse lookup is an O(1) operation\n     */\n    GetContent(VerseID: number) : IVerse\n    {\n        if (this.translationName === \"NONE\") {\n            throw Error(\"Translation version has not been set\");\n        }\n        else if (this.translationName === \"LOADING\") {\n            throw Error(\"Translation version is still loading. Try use a callback using AddOnLoadedCallback()\");\n        }\n        const {VerseNumber, Chapter} = Indexer.GetVerseSignature(VerseID);\n        const primary = this.book.filter(verse => {\n            return verse.VerseNumber === VerseNumber && verse.Chapter === Chapter;\n        })[0];\n\n        //console.log(this.book);\n        if (primary === undefined)\n        {\n            console.log(this.translationName);\n            console.log(\"VerseID \", VerseID);\n            console.log( this.book);\n            return {\n                Content: \"loading\",\n                Chapter: 1,\n                VerseNumber: 1\n            };\n        }\n\n        // return a copy\n        return {\n            Content: primary.Content,\n            Chapter: primary.Chapter,\n            VerseNumber: primary.VerseNumber\n        }\n    }\n}\n","import { Plugins } from '@capacitor/core';\nimport { IVerse, IVerseSignature } from './Interfaces';\nconst { Storage } = Plugins;\n\nexport interface IFolder {\n\tid: number,\n\tname: string,\n\tmemoryLocation: string,\n\torder: number,\n\tnotificationsOn: boolean\n}\n\nexport default class StorageAssistant{\n\n\tstoredIDs:Array<Number> = [];\n\n\tasync loadFile(){\n\t\tconst  data  =  await Storage.get({ key: 'index' });\n\t\tif(data.value!=null){\n\t\t\tthis.storedIDs = await JSON.parse(data.value)\n\t\t}\n\t}\n\n\tBookmarkVerse(VerseID:Number){\n\t\tif (this.isBookmarked(VerseID)){\n\t\t\treturn;\n\t\t}\n\n\t\tthis.storedIDs.push(VerseID);\n\t\tStorage.set({\n\t\t\tkey: \"index\",\n\t\t\tvalue: JSON.stringify(this.storedIDs)\n\t\t})\n\t}\n\n\tremoveBookmark(VerseID:Number){\n\t\tif(!this.isBookmarked(VerseID)){\n\t\t\treturn; //if it is not in the list\n\t\t}\n\n\t\t//get the index of the verse\n\t\tvar index = this.storedIDs.indexOf(VerseID);\n\n\t\tthis.storedIDs.splice(index, 1);\n\n\t\tStorage.set({\n\t\t\tkey: \"index\",\n\t\t\tvalue: JSON.stringify(this.storedIDs)\n\t\t})\n\t}\n\n\tisBookmarked(VerseID:Number) : boolean{\n\t\treturn this.storedIDs.indexOf(VerseID) !== -1;\n\t}\n\n\t// a unique key name in memory to store a folder's verses\n\tgetFolderKey(folderName:string) : string {\n\t\treturn \"folder-memory-key-\"+folderName;\n\t}\n\n\t// get list of folders\n\tasync getFolders() : Promise<Array<IFolder>> {\n\t\treturn Storage.get({key: \"folders\"})\n\t\t\t.then((json) : Promise<Array<IFolder>> => (json.value) ?\n\t\t\t\tJSON.parse(json.value): // folders do exist\n\t\t\t\t[])\t\t\t\t\t\t// folders do not exist\n\t}\n\n\t// set list of folders\n\tasync setFolders(existingFolders : Array<IFolder>) {\n\t\t// persist the folders\n\t\treturn Storage.set({\n\t\t\tkey: \"folders\",\n\t\t\tvalue: JSON.stringify(existingFolders)\n\t\t});\n\t}\n\n\t// creates a new folder. throws an error if folder already exists\n\tasync createFolder(folderName:string) {\n\n\t\t// append new folder\n\t\treturn this.getFolders()\n\t\t.then(existingFolders => {\n\t\t\t// check that folder does not already exist\n\t\t\tconst alreadyExists = existingFolders.some(folder => folder.name === folderName);\n\t\t\tif (alreadyExists) { throw new Error(\"Folder \"+folderName+\" already exists.\"); }\n\t\t\t\n\t\t\t// list ordering\n\t\t\tconst maxOrder = existingFolders.reduce<number>((order:number, folder) => {\n\t\t\t\treturn Math.max(order, folder.order);\n\t\t\t},\n\t\t\t-1 // initial value\n\t\t\t);\n\t\t\tconst order = maxOrder + 1;\n\n\t\t\t// id\n\t\t\tconst maxId = existingFolders.reduce<number>((id:number, folder) => {\n\t\t\t\treturn Math.max(id, folder.id);\n\t\t\t},\n\t\t\t-1 // initial value\n\t\t\t);\n\t\t\tconst id = maxId + 1;\n\t\t\t\n\t\t\texistingFolders.push({\n\t\t\t\tid,\n\t\t\t\tname: folderName,\n\t\t\t\tmemoryLocation: this.getFolderKey(folderName),\n\t\t\t\torder,\n\t\t\t\tnotificationsOn: false // by default notifications are off.\n\t\t\t});\n\t\t\treturn existingFolders;\n\t\t})\n\n\t\t// persist the folders\n\t\t.then(existingFolders => this.setFolders(existingFolders));\n\t}\n\n\tasync deleteFolder(folder : IFolder) {\n\t\t// refresh folder data\n\t\treturn this.getFolders()\n\t\t.then((folders : Array<IFolder>) => {\n\t\t\tconst toRemove = folders.find(f => f.id === folder.id);\n\t\t\tif (toRemove === undefined) throw new Error(\"Folder not found.\");\n\t\t\treturn {folders, toRemove}\n\t\t})\n\t\t\n\t\t// delete\n\t\t.then(({folders, toRemove}) => {\n\n\t\t\t// recreate array\n\t\t\tconst removeId = toRemove.id;\n\t\t\tconst removeOrder = toRemove.order;\n\t\t\treturn folders.reduce<Array<IFolder>>((editedFolders, currentFolder) => {\n\n\t\t\t\t// shift forward the order\n\t\t\t\tif (currentFolder.order > removeOrder) {\n\t\t\t\t\t--currentFolder.order;\n\t\t\t\t}\n\n\t\t\t\t// add folder to array \n\t\t\t\tif (currentFolder.id !== removeId) {\n\t\t\t\t\treturn [...editedFolders, currentFolder] // use of spread operator...\n\t\t\t\t}\n\n\t\t\t\t// do not add folder to array\n\t\t\t\telse {\n\t\t\t\t\treturn editedFolders;\n\t\t\t\t}\n\t\t\t}, []);\n\t\t})\n\n\t\t// persist the folders\n\t\t.then(editedFolders => this.setFolders(editedFolders));\n\t}\n\n\t// rename a folder\n\tasync renameFolder(folder : IFolder, name : string) {\n\n\t\t// refresh folder data\n\t\treturn this.getFolders()\n\t\t.then((folders : Array<IFolder>) => {\n\t\t\tconst toRename = folders.find(f => f.id === folder.id);\n\t\t\tif (toRename === undefined) throw new Error(\"Folder not found.\");\n\t\t\ttoRename.name = name; // rename the folder\n\t\t\treturn folders;\n\t\t})\n\t\t\n\t\t// persist the folders\n\t\t.then(editedFolders => this.setFolders(editedFolders));\n\t}\n\n\t// reorder the folders\n\tasync reorderFolders(folder : IFolder, newOrder : number) {\n\t\t// refresh folder data\n\t\treturn this.getFolders()\n\t\t.then((folders : Array<IFolder>) => {\n\t\t\tconst toReorder = folders.find(f => f.id === folder.id);\n\t\t\tif (toReorder === undefined) throw new Error(\"Folder not found.\");\n\t\t\treturn {folders, toReorder}\n\t\t})\n\n\t\t// reorder folders\n\t\t.then(({folders, toReorder}) => {\n\t\t\tconst oldOrder = toReorder.order;\n\n\t\t\t// shift order up\n\t\t\tif (oldOrder < newOrder) {\n\t\t\t\treturn folders.map(folder => {\n\t\t\t\t\t// bump up\n\t\t\t\t\tif (folder.order === oldOrder) {\n\t\t\t\t\t\tfolder.order = newOrder;\n\t\t\t\t\t}\n\t\t\t\t\t// bump down\n\t\t\t\t\telse if (folder.order <= newOrder && folder.order > oldOrder) {\n\t\t\t\t\t\t--folder.order;\n\t\t\t\t\t}\n\t\t\t\t\treturn folder;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// shift order down\n\t\t\tif (oldOrder > newOrder) {\n\t\t\t\treturn folders.map(folder => {\n\t\t\t\t\t// bump down\n\t\t\t\t\tif (folder.order === oldOrder) {\n\t\t\t\t\t\tfolder.order = newOrder;\n\t\t\t\t\t}\n\t\t\t\t\t// bump up\n\t\t\t\t\telse if (folder.order >= newOrder && folder.order < oldOrder) {\n\t\t\t\t\t\t++folder.order;\n\t\t\t\t\t}\n\t\t\t\t\treturn folder;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// no work to be done\n\t\t\treturn folders;\n\t\t})\n\n\t\t// persist the folders\n\t\t.then(reorderedFolders => this.setFolders(reorderedFolders));\n\t}\n\t\n\t// get list of folder verse ids\n\tasync getFolderVerseIds(folder : IFolder) : Promise<Array<IVerseSignature>> {\n\t\treturn Storage.get({ key: folder.memoryLocation })\n\t\t.then (data => (data.value) ? JSON.parse(data.value) : [])\n\t}\n\n\t// add a verse id to folder. rejects on verse already exists\n\tasync addVerseToFolder(folder : IFolder, verseSignature : IVerseSignature) {\n\t\treturn this.getFolderVerseIds(folder)\n\t\t.then(verseArray => verseArray.push(verseSignature)) // append to list\n\t\t.then(verseArray => { // add to storage\n\t\t\tStorage.set({\n\t\t\t\tkey: folder.memoryLocation,\n\t\t\t\tvalue: JSON.stringify(verseArray)\n\t\t\t})\n\t\t})\n\t}\n}\n\n","/*\n * Filter Collection\n * A collection of filters be used for proverb selection\n * Add to ProverbData filter\n *\n * Description:\n * Create a filter callback function using one of the following generator functions.\n * Add to filterBank (via ContentManager API)\n *\n * Code for Christ, Jan 4, 2020\n */\n\nimport {IVerseSignature, IFilter, IFilterCallback} from './Interfaces';\nimport Indexer from './Indexer'\nimport StorageAssistant from \"./StorageAssistant\";\n\nexport const FilterGenerators : {[name:string] : (input1?: any, input2?: any) => IFilter} = {\n    /*\n        Example:\n        FilterName :\n            FilterGenerator(someInput)\n                Returns:\n                [\n                    name: UniqueFilterID: string -- This is just overwritten by the generator's key,\n                    callback: Filter\n                ]\n\n        Note:\n        While multiple filters can be used, only one filter of a particular name can be added\n     */\n\n    BySpan : (start:IVerseSignature, end:IVerseSignature) => {\n        const c: IFilterCallback = (verse : IVerseSignature) => {\n            return Indexer.IsVerseBetween(verse, start, end);\n        };\n        return {\n            name: \"BySpan\",\n            callback: c\n        };\n    },\n\n    ByType : (type : string) => {\n        let c: IFilterCallback = (verse : IVerseSignature) => {\n            const verseTypes = Indexer.GetVerseType(Indexer.GetVerseID(verse.Chapter, verse.VerseNumber)).types;\n            if (verseTypes !== undefined)\n            {\n                return verseTypes.some(t => t.toLowerCase() === type.toLowerCase());\n            }\n            return false;\n        };\n\n        if (type === \"all\")\n        {\n            c = (verse: IVerseSignature) => true;\n        }\n        return {\n            name: \"ByType\",\n            callback: c\n        };\n    },\n\n    ByChapter : (chapter : number) => {\n        const c: IFilterCallback = (verse : IVerseSignature) => {\n            return (verse.Chapter === chapter);\n        };\n\n        return {\n            name: \"ByChapter\",\n            callback: c\n        };\n    },\n\n    BySaved : (sa : StorageAssistant) => {\n        const c: IFilterCallback = (verse : IVerseSignature) => {\n            return (sa.isBookmarked(Indexer.GetVerseID(verse.Chapter, verse.VerseNumber)));\n        };\n\n        return {\n            name: \"BySaved\",\n            callback: c\n        }\n    }\n\n    /*\n    The following nearly works but should be reformatted to return a callback that takes a verse signature\n    ByChapter : (chapter : number) => {\n        const filter : IFilter = (proverb : IProverb) => (chapter === proverb.Chapter);\n        return [\n            \"Chapter\",\n            filter]\n    },\n\n    ByContent : (text : string) => {\n        const filter : IFilter = (proverb) => {\n            return proverb.Content.toLowerCase()\n                .includes(text.toLowerCase());\n        };\n        return [\n            \"Content\",\n            filter];\n    },\n\n    BySaved : () => [\"Saved\", (proverb) => proverb.Saved]\n\n    */\n};\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { IonReactRouter } from '@ionic/react-router';\n\nimport {\n  IonApp,\n  IonIcon,\n  IonLabel,\n  IonRouterOutlet,\n  IonTabBar,\n  IonTabButton,\n  IonTabs,\n  useIonViewDidEnter\n} from '@ionic/react';\n\nimport {\n  libraryOutline,\n  bookmarkOutline,\n  shuffleOutline\n} from 'ionicons/icons';\n\nimport Library from './pages/Library';\nimport Bookmarked from './pages/Bookmarked';\nimport Discover from './pages/Discover';\nimport Details from './pages/Details';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport './fonts/font-config.css';\n\nimport ContentManager from \"./api/ContentManager\"\n\n// notifications\nimport { Plugins, AppState } from '@capacitor/core';\nimport NotificationsAssistant from \"./api/NotificationsAssistant\"\n\n// init content manager\nlet cm = new ContentManager();\n\nconst App: React.FC = () => {\n\n  // capacitor notifications setup\n  useIonViewDidEnter(() => {\n    // refresh notifications on app enter\n    Plugins.App.addListener(\"appStateChange\", (state: AppState) => {\n      if (state.isActive) {\n        // call the notification setup\n        let notificationAssistant = new NotificationsAssistant();\n        notificationAssistant.NotificationSetter();\n      }\n    });\n  });\n \n  // root of the proverbs box app\n  return (\n    <>\n      <IonApp>\n        <IonReactRouter>\n          <IonTabs>\n            <IonRouterOutlet>\n              <Route path=\"/library\" component={() => <Library contentManager={cm}/>} exact={true}/>\n              <Route path=\"/bookmarked\" component={Bookmarked} exact={true}/>\n              <Route path=\"/bookmarked/details\" component={Details}/>\n              <Route path=\"/discover\" component={() => <Discover contentManager={cm}/>} exact={true}/>\n              <Route path=\"/\" render={() => <Redirect to=\"/library\"/>} exact={true}/>\n            </IonRouterOutlet>\n            <IonTabBar slot=\"bottom\">\n              <IonTabButton tab=\"library\" href=\"/library\">\n                <IonIcon icon={libraryOutline}/>\n                <IonLabel>Library</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"bookmarked\" href=\"/bookmarked\">\n                <IonIcon icon={bookmarkOutline}/>\n                <IonLabel>Bookmarked</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"discover\" href=\"/discover\">\n                <IonIcon icon={shuffleOutline}/>\n                <IonLabel>Discover</IonLabel>\n              </IonTabButton>\n            </IonTabBar>\n          </IonTabs>\n        </IonReactRouter>\n      </IonApp>\n    </>\n  );\n}\n\nexport default App;","import Indexer from \"./Indexer\"\nimport TranslationMap from \"./TranslationMap\"\nimport StorageAssistant from \"./StorageAssistant\"\nimport {FilterGenerators} from \"./FilterCollection\"\nimport {\n    IVerseSignature,\n    IVerse,\n    IFilter,\n    IStatement,\n    IArticle,\n    ISaying,\n    ITitle,\n    IModel,\n    IComponentModel\n} from \"./Interfaces\"\n\nexport default class ContentManager {\n\n    /*\n     * Methods Summary\n     *  (async) LoadTranslation(translationName: string)\n     *  GetModel()\n     *  UpdateSearch(text: string)\n     *  Bookmark(verse: IVerseSignature)\n     *  RemoveBookmark(verse: IVerseSignature)\n     *  ApplyFilter(filter: IFilter)\n     *  RemoveFilter(filterName: string)\n     */\n\n    private storageAssistant: StorageAssistant;\n    private filters: Array<IFilter>;\n    private filterCache: {[name: string]: Array<IFilter>};\n    private searchPattern: string;\n    private translator: TranslationMap;\n    private translatorLoading: boolean;\n    private componentModels: Array<IComponentModel>;\n    private refinedModels: Array<IComponentModel>;\n\n    constructor() {\n        this.storageAssistant = new StorageAssistant();\n        this.filters = [];\n        this.filterCache = {};\n        this.searchPattern = \"\";\n        this.translator = new TranslationMap();\n        this.translatorLoading = false;\n        this.componentModels = [];\n        this.refinedModels = [];\n\n        this.storageAssistant.loadFile();\n    }\n\n    IsTranslatationReady() {\n        return this.translator.IsReady();\n    }\n\n    async LoadTranslation(translationName: string) {\n        this.translatorLoading = true;\n        this.translator.LoadTranslation(translationName);\n\n        let translationPromise = new Promise((resolve, reject) => {\n            this.translator.AddOnLoadedCallback(()=>{\n                this.translatorLoading = false;\n                this.RefreshModels();\n                this.RefineSearch();\n                resolve();\n            });\n        });\n\n        return translationPromise;\n    }\n\n    OnLoadTranslation(func: () => void) {\n        this.translator.AddOnLoadedCallback(func);\n    }\n\n    GetTranslationName() {\n        return this.translator.GetTranslationName();\n    }\n\n    GetModel() {\n        // sentinel\n        if (this.translator.GetTranslationName() === \"NONE\" || this.translator.GetTranslationName() === \"LOADING\")\n        {\n            return {\n                ComponentModels: [],\n                FilterNames: [],\n                Translation: \"NONE\",\n            }\n        }\n\n        // generate model\n        const model: IModel = {\n            ComponentModels: this.refinedModels,\n            FilterNames: this.filters.map(f => f.name),\n            Translation: this.translator.GetTranslationName()\n        };\n\n        // return\n        return model;\n    }\n\n    UpdateSearch(text: string) {\n        this.searchPattern = text;\n        this.RefineSearch();\n    }\n\n    Bookmark(verse: IVerseSignature) {\n        const verseID = Indexer.GetVerseID(verse.Chapter, verse.VerseNumber);\n        this.storageAssistant.BookmarkVerse(verseID);\n        this.ToggleSaved(verse, true);\n        console.log(\"Saved verse: \", verseID, \" -- Bookmarked?: \", this.storageAssistant.isBookmarked(verseID));\n    }\n\n    private ToggleSaved(verse:IVerseSignature, toggleSaved:boolean) {\n        [this.componentModels, this.refinedModels].forEach(models => {\n            const target = models.filter(m => {\n                if (m.Type === \"Saying\") {\n                    const v = (m.Model as ISaying).Verses[0];\n                    return v.VerseNumber === verse.VerseNumber\n                        && v.Chapter === verse.Chapter;\n                }\n                else if (m.Type === \"Statement\") {\n                    const v = (m.Model as IStatement).Verse;\n                    return v.Chapter === verse.Chapter\n                        && v.VerseNumber === verse.VerseNumber;\n                }\n                return false;\n            })[0];\n            (target.Model as (IStatement | ISaying)).Saved = toggleSaved;\n        });\n    }\n\n    RemoveBookmark(verse: IVerseSignature) {\n        const verseID = Indexer.GetVerseID(verse.Chapter, verse.VerseNumber);\n        this.storageAssistant.removeBookmark(verseID);\n        this.ToggleSaved(verse, false);\n        console.log(\"Unsaved verse: \", verseID, \" -- Bookmarked?: \", this.storageAssistant.isBookmarked(verseID));\n    }\n\n    CacheFilters(cacheName : string) {\n        this.filterCache[cacheName] = this.filters;\n        this.filters = [];\n\n        // refresh models\n        // sentinel\n        if (this.translator.IsReady()) {\n            this.RefreshModels();\n        }\n    }\n\n    RestoreFilters(cacheName : string) {\n        if (cacheName in this.filterCache) {\n            this.filters = this.filterCache[cacheName];\n        }\n\n        // refresh models\n        // sentinel\n        if (this.translator.IsReady()) {\n            this.RefreshModels();\n        }\n    }\n\n    ClearFiltersNoRefresh() {\n        this.filters = [];\n    }\n\n    ClearFilters() {\n        this.filters = [];\n\n        // refresh models\n        // sentinel\n        if (this.translator.IsReady()) {\n            this.RefreshModels();\n        }\n    }\n\n    // Automatically updates old copy of a filter\n    ApplyFilter(filterName: string, ...filterParams: any) {\n\n        // check if filter is present\n        /*let notPresent = this.filters.every(f => {\n            return f.name !== filter.name;\n        });*/\n\n        // verify filter\n        if (!(filterName in FilterGenerators)) {\n            throw Error(\"Filter: \" + filterName + \", is not found. Please add a filter generator to ./api/FilterCollection.ts\");\n        }\n\n        // get generator\n        let filterGenerator = FilterGenerators[filterName];\n\n        // verify params\n        if (filterParams.length !== filterGenerator.length) {\n            throw Error(\"Filter Generator for: \" + filterName + \", takes \" + filterGenerator.length + \" params. See ./api/FilterCollection.ts\");\n        }\n\n        // run generator\n        let filter = filterGenerator(...filterParams);\n        filter.name = filterName;\n\n        // ---- For efficiency ----\n        // add option: refine search pool if filter not replaced.\n\n        // remove old version\n        this.RemoveFilter(filter.name);\n\n        // add filter\n        this.filters.push(filter);\n\n        // refresh models\n        if (this.translator.IsReady()) {\n            this.RefreshModels();\n        }\n    }\n\n    // Remove a filter by filter name\n    RemoveFilter(filterName: string) {\n        this.filters = this.filters.filter(f => {\n            return f.name !== filterName;\n        });\n\n        // For efficiency, add option: remove search pool\n\n        // refresh models\n        // sentinel\n        if (this.translator.IsReady()) {\n            this.RefreshModels();\n        }\n    }\n\n    private UpdateBookmarkModelCache(verseID: number, isBookmarked: boolean) {\n\n        // update cached models\n        const batch = [this.componentModels, this.refinedModels];\n        batch.forEach(models => {\n            models.forEach(m => {\n                if (m.Type === \"Statement\") {\n                    const model = m.Model as IStatement;\n                    if (Indexer.GetVerseID(model.Verse.Chapter, model.Verse.VerseNumber) === verseID) {\n                        model.Saved = isBookmarked;\n                    }\n                }\n                else if (m.Type === \"Sayings\") {\n                    const model = m.Model as ISaying;\n                    if (Indexer.GetVerseID(model.Verses[0].Chapter, model.Verses[0].VerseNumber) === verseID) {\n                        model.Saved = isBookmarked;\n                    }\n                }\n                else if (m.Type === \"Article\") {\n                    // Potentially add highlight/notes\n                }\n            })\n        });\n    }\n\n    private ClearHighlights() {\n        this.componentModels.forEach(m => {\n\n            // Saying search (all in or all out)\n            if (m.Type === \"Saying\") {\n                const model = m.Model as ISaying;\n                model.Verses.forEach(v => {\n                    v.SearchHighlights = undefined;\n                });\n            }\n\n            // Statement search (in or out)\n            else if (m.Type === \"Statement\") {\n                const model = m.Model as IStatement;\n                model.Verse.SearchHighlights = undefined;\n            }\n\n            // Article search (filter by verse)\n            else if (m.Type === \"Article\") {\n                const model = m.Model as IArticle;\n                model.Verses.forEach(v => {\n                    v.SearchHighlights = undefined;\n                });\n            }\n        })\n    }\n\n    private RefreshModels() {\n\n        // filter verses\n        let signatures = Indexer.PermuteVerses();\n        this.filters.forEach(f => {\n            signatures = signatures.filter(f.callback);\n        });\n\n        // load verse metadata\n        signatures.forEach(s => {\n            Indexer.LoadVerseMetadata(s);\n        });\n\n        // bundle verses\n        let bundles = signatures.reduce<{[groupName: string]: Array<IVerseSignature>;}>((acc, cur) => {\n\n            let groupName;\n            // deal with titles (Too difficult for now)\n            /*\n            if (cur.TitlePrefix){\n                // Title & Statement\n                groupName = \"title-\" + cur.GroupID;\n                acc[groupName] = [];\n                acc[groupName].push({\n                    Chapter: cur.Chapter,\n                    VerseNumber: cur.VerseNumber,\n                    GroupID: cur.GroupID,\n                    Type: \"Title\"\n                    TitlePrefix?: boolean\n                });\n                model = {\n                    Text: verses[0].Content.split(\".\")[0] + \".\",\n                    Ref: \"\" + \"Proverbs \" + verses[0].Chapter + verses[0].VerseNumber\n                };\n\n                // update bundle\n                verses[0].Content = verses[0].Content.split(\".\")[1].trimLeft();\n                bundle[0].Type.shift()\n            }\n            */\n\n            // get unique group name\n            if (cur.Type) {\n                groupName = cur.Type;\n            }\n            else {\n                throw Error(\"verse must have type to be bundled\");\n            }\n            if (cur.GroupID) {\n                groupName += \"-\";\n                groupName += cur.GroupID;\n            }\n\n            // init group\n            if (!(groupName in acc)) {\n                acc[groupName] = [];\n            }\n\n            // add to group\n            acc[groupName].push(cur);\n\n            // return result\n            return acc;\n        }, {});\n\n        // map bundles to models\n        const componentModels: Array<IComponentModel> = Object.values(bundles).map(bundle => {\n            const verses: Array<IVerse> = bundle.map(v => {\n                return this.translator.GetContent(Indexer.GetVerseID(v.Chapter, v.VerseNumber));\n            });\n\n            // Discard titles :( [fix later] (not turned into title component models)\n            if (bundle[0].TitlePrefix) {\n                const titleDividers = [\".\", \":\"];  // Config\n                let prefix = verses[0].Content;\n                let foundPrefix = false;\n\n                titleDividers.forEach((divider : string) => {\n                    let verseParts = verses[0].Content.split(divider);\n                    let n_prefix = verseParts[0] + divider;\n                    if (n_prefix.length < prefix.length && verseParts.length >= 2)\n                    {\n                        prefix = n_prefix;\n                        verses[0].Content = verseParts[1].trimLeft();\n                        foundPrefix = true;\n                    }\n                });\n                if (foundPrefix)\n                {\n                    bundle[0].TitlePrefix = prefix;\n                }\n            }\n\n            if (!bundle[0].Type) {\n                throw Error(\"Type must be defined for VerseSignature when creating models\");\n            }\n\n            let type: string = bundle[0].Type;\n            let model: IStatement | IArticle | ISaying | ITitle | undefined = undefined;\n\n            // Title\n            if (bundle[0].Type === \"Title\") {\n                model = {\n                    Text: verses[0].Content,\n                    Ref: \"Proverbs \" + verses[0].Chapter + verses[0].VerseNumber\n                }\n            }\n\n            // Statement\n            else if (bundle[0].Type === \"Statement\") {\n                const statement = verses[0];\n                const verseID = Indexer.GetVerseID(statement.Chapter, statement.VerseNumber);\n                model = {\n                    Verse: statement,\n                    Saved: this.storageAssistant.isBookmarked(verseID),\n                    ID: verseID\n                };\n            }\n\n            // Saying\n            else if (bundle[0].Type === \"Saying\") {\n                if (!bundle[0].GroupID) {\n                    throw Error(\"GroupID must be defined for Sayings when creating model\");\n                }\n                model = {\n                    Verses: verses,\n                    Saved: false,  // ADD MEMORY COMPONENT\n                    ID: bundle[0].GroupID\n                };\n            }\n\n            // Article\n            else if (bundle[0].Type === \"Article\") {\n                if (!bundle[0].GroupID) {\n                    throw Error(\"GroupID must be defined for Article when creating model\");\n                }\n                model = {\n                    Verses: verses,\n                    ID: bundle[0].GroupID\n                };\n            }\n\n            if (!model) {\n                console.log(\"bundle failure: \", bundle);\n                throw Error(\"model not set (undefined)\");\n            }\n\n            return {\n                Type: type,\n                Model: model\n            };\n        });\n        this.componentModels = componentModels;\n        this.RefineSearch();\n    }\n\n    private RefineSearch(): void {\n\n        const sanitizedSearch = this.searchPattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n        if (sanitizedSearch === \"\")\n        {\n            this.ClearHighlights();\n            this.refinedModels = this.componentModels;\n            return;\n        }\n\n        let ore: Array<IComponentModel | undefined> = this.componentModels.map((m: IComponentModel) => {\n\n            // Saying search (all in or all out)\n            if (m.Type === \"Saying\") {\n                const model = m.Model as ISaying;\n                const keepSaying = model.Verses.map(verse => { // replace with for loop?\n                    Indexer.SearchVerseClear(verse);\n                    Indexer.SearchVerseHighlight(verse, sanitizedSearch);\n                    return verse;\n                })\n                    .some(isHighlighted => isHighlighted);\n\n                // original m is altered to contain highlighted features.\n                if (keepSaying) {\n                    return m;\n                }\n\n                else {\n                    return undefined;\n                }\n            }\n\n            // Statement search (in or out)\n            else if (m.Type === \"Statement\") {\n                const model = m.Model as IStatement;\n                Indexer.SearchVerseClear(model.Verse);\n                if (Indexer.SearchVerseHighlight(model.Verse, sanitizedSearch)) {\n                    return m;\n                }\n                else {\n                    return undefined;\n                }\n            }\n\n            // Article search (filter by verse)\n            else if (m.Type === \"Article\") {\n                const model = m.Model as IArticle;\n                const refinedVerses = model.Verses.filter(v => {\n                    return Indexer.SearchVerseHighlight(v, sanitizedSearch);\n                });\n\n                if (refinedVerses.length === 0) {\n                    return undefined;\n                }\n                else {\n                    const refinedArticle = {\n                        Type: \"Article\",\n                        Model: {\n                            Verses: refinedVerses,\n                            ID: model.ID\n                        }\n                    };\n                    return refinedArticle;\n                }\n            }\n\n            // Don't alter titles\n            else if (m.Type === \"Title\") {\n                return m;\n            }\n\n            // Failure\n            else {\n                return undefined;\n            }\n        });\n\n        // remove dross\n        const refinedModel = ore.filter(m => !!m);\n\n        // cache models\n        this.refinedModels = refinedModel as Array<IComponentModel>;\n        return;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}